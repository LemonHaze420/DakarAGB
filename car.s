@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:

	.lcomm	LastTime.3,4
	.section .rodata
	.align	2
.LC0:
	.word	LastTime.3
.text
	.align	2
	.globl	Car_MoveCar
	.type	 Car_MoveCar,function
	.thumb_func
Car_MoveCar:
	sub	sp, sp, #16
	push	{r4, r7, lr}
	ldr	r4, .L9
	add	sp, sp, r4
	add	r7, sp, #540
	add	r4, r7, #0
	add	r4, r4, #24
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
	add	r0, r7, #0
	add	r0, r0, #24
	mov	r0, #142
	lsl	r0, r0, #2
	add	r1, r7, r0
	ldr	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #24
	mov	r1, #143
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r2, r7, #0
	strb	r0, [r2]
	add	r0, r7, #1
	strb	r1, [r0]
	ldr	r0, .L9+4
	mov	r1, #0
	str	r1, [r0]
	ldr	r0, .L9+4
	ldr	r1, [r0]
	ldr	r2, .L9+8
	add	r0, r1, r2
	str	r0, [r7, #4]
	add	r0, r7, #1
	mov	r1, #0
	add	r2, r7, #1
	mov	r3, #0
	ldrsb	r3, [r2, r3]
	cmp	r3, #0
	bne	.L3	@cond_branch
	mov	r1, #1
.L3:
	strb	r1, [r0]
	add	r0, r7, #0
	mov	r1, #0
	add	r2, r7, #0
	mov	r3, #0
	ldrsb	r3, [r2, r3]
	cmp	r3, #0
	bne	.L4	@cond_branch
	mov	r1, #1
.L4:
	strb	r1, [r0]
.L5:
	ldr	r0, .L9+4
	ldr	r1, [r0]
	ldr	r0, [r7, #4]
	cmp	r1, r0
	blt	.L7	@cond_branch
	b	.L6
.L10:
	.align	2
.L9:
	.word	-552
	.word	LastTime.3
	.word	327
.L7:
	ldr	r0, .L11
	ldr	r1, [r7, #4]
	ldr	r0, [r0]
	sub	r1, r1, r0
	str	r1, [r7, #8]
	ldr	r0, [r7, #8]
	bl	__floatsidf
	add	r3, r1, #0
	add	r2, r0, #0
	add	r1, r3, #0
	add	r0, r2, #0
	ldr	r2, .L11+4		@ created by thumb_load_double_from_address
	ldr	r3, .L11+8		@ created by thumb_load_double_from_address
	bl	__gtdf2
	cmp	r0, #0
	ble	.L8	@cond_branch
	mov	r0, #0
	str	r0, [r7, #8]
.L8:
	add	r4, r7, #0
	add	r4, r4, #24
	mov	r0, sp
	add	r1, sp, #528
	ldr	r0, [r7, #8]
	str	r0, [r1]
	add	r1, r7, #0
	mov	r0, #0
	ldrsb	r0, [r1, r0]
	mov	r1, sp
	add	r2, sp, #532
	str	r0, [r2]
	add	r1, r7, #1
	mov	r0, #0
	ldrsb	r0, [r1, r0]
	mov	r1, sp
	add	r2, sp, #536
	str	r0, [r2]
	mov	r0, sp
	add	r1, r4, #0
	add	r1, r1, #16
	mov	r2, #132
	lsl	r2, r2, #2
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, [r4, #4]
	ldr	r2, [r4, #8]
	ldr	r3, [r4, #12]
	bl	Car_CalcMove
	ldr	r0, .L11
	ldr	r1, .L11
	ldr	r2, [r1]
	ldr	r1, [r7, #8]
	add	r2, r2, r1
	str	r2, [r0]
	b	.L5
.L12:
	.align	2
.L11:
	.word	LastTime.3
	.long 0x3f947ae1, 0x47ae147b	@ double 2.00000000000000004163e-2
.L6:
	ldr	r0, .L13
	ldr	r1, [r7, #4]
	str	r1, [r0]
	mov	r0, #1
	b	.L2
.L14:
	.align	2
.L13:
	.word	LastTime.3
.L2:
	mov	r3, #138
	lsl	r3, r3, #2
	add	sp, sp, r3
	pop	{r4, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe1:
	.size	 Car_MoveCar,.Lfe1-Car_MoveCar
	.align	2
	.globl	Car_CalcMove
	.type	 Car_CalcMove,function
	.thumb_func
Car_CalcMove:
	sub	sp, sp, #16
	push	{r4, r7, lr}
	ldr	r4, .L16
	add	sp, sp, r4
	add	r7, sp, #540
	add	r4, r7, #0
	add	r4, r4, #16
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r0, #141
	lsl	r0, r0, #2
	add	r1, r7, r0
	ldr	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #16
	mov	r1, #142
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r2, r7, #0
	strb	r0, [r2]
	add	r0, r7, #1
	strb	r1, [r0]
	add	r4, r7, #0
	add	r4, r4, #16
	add	r1, r7, #0
	mov	r0, #0
	ldrsb	r0, [r1, r0]
	mov	r1, sp
	add	r2, sp, #528
	str	r0, [r2]
	mov	r0, sp
	add	r1, r4, #0
	add	r1, r1, #16
	mov	r2, #132
	lsl	r2, r2, #2
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, [r4, #4]
	ldr	r2, [r4, #8]
	ldr	r3, [r4, #12]
	bl	Car_ComputeForces
	add	r4, r7, #0
	add	r4, r4, #16
	add	r1, r7, #0
	add	r1, r1, #16
	mov	r1, #140
	lsl	r1, r1, #2
	add	r0, r7, r1
	mov	r1, sp
	add	r2, sp, #528
	ldr	r0, [r0]
	str	r0, [r2]
	add	r1, r7, #0
	mov	r0, #0
	ldrsb	r0, [r1, r0]
	mov	r1, sp
	add	r2, sp, #532
	str	r0, [r2]
	add	r1, r7, #1
	mov	r0, #0
	ldrsb	r0, [r1, r0]
	mov	r1, sp
	add	r2, sp, #536
	str	r0, [r2]
	mov	r0, sp
	add	r1, r4, #0
	add	r1, r1, #16
	mov	r2, #132
	lsl	r2, r2, #2
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, [r4, #4]
	ldr	r2, [r4, #8]
	ldr	r3, [r4, #12]
	bl	Car_Integrate
	add	r4, r7, #0
	add	r4, r4, #16
	add	r1, r7, #0
	mov	r0, #0
	ldrsb	r0, [r1, r0]
	mov	r1, sp
	add	r2, sp, #528
	str	r0, [r2]
	mov	r0, sp
	add	r1, r4, #0
	add	r1, r1, #16
	mov	r2, #132
	lsl	r2, r2, #2
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, [r4, #4]
	ldr	r2, [r4, #8]
	ldr	r3, [r4, #12]
	bl	Car_CalculateVertices
.L15:
	mov	r3, #136
	lsl	r3, r3, #2
	add	sp, sp, r3
	pop	{r4, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.L17:
	.align	2
.L16:
	.word	-544
.Lfe2:
	.size	 Car_CalcMove,.Lfe2-Car_CalcMove
	.align	2
	.globl	Car_CarInit
	.type	 Car_CarInit,function
	.thumb_func
Car_CarInit:
	sub	sp, sp, #16
	push	{r4, r7, lr}
	add	sp, sp, #-28
	add	r7, sp, #8
	add	r4, r7, #0
	add	r4, r4, #32
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
	mov	r0, #250
	lsl	r0, r0, #17
	str	r0, [r7, #16]
	add	r0, r7, #0
	add	r0, r0, #32
	ldrb	r1, [r0]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	mov	r1, #163
	str	r1, [r0, #24]
	add	r0, r7, #0
	add	r0, r0, #32
	mov	r1, #160
	lsl	r1, r1, #8
	str	r1, [r0, #8]
	add	r0, r7, #0
	add	r0, r0, #32
	mov	r1, #192
	lsl	r1, r1, #7
	str	r1, [r0, #4]
	add	r0, r7, #0
	add	r0, r0, #32
	mov	r1, #192
	lsl	r1, r1, #7
	str	r1, [r0, #12]
	add	r0, r7, #0
	add	r0, r0, #32
	mov	r1, #8
	str	r1, [r0, #16]
	add	r2, r7, #0
	add	r2, r2, #32
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2, #124]
	add	r1, r2, #0
	add	r3, r2, #0
	add	r3, r3, #128
	ldr	r1, [r3]
	add	r3, r2, #0
	add	r4, r2, #0
	add	r4, r4, #132
	ldr	r2, [r4]
	mov	r3, #0
	bl	VSetVec
	add	r1, r7, #0
	add	r1, r1, #32
	add	r0, r1, #0
	add	r2, r1, #0
	add	r2, r2, #148
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	mov	r3, #0
	bl	VSetVec
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, .L19
	ldr	r0, .L19+4
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2, #64]
	ldr	r1, [r2, #68]
	ldr	r2, [r2, #72]
	bl	VSetVec
	add	r2, r7, #0
	add	r2, r2, #32
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2, #76]
	ldr	r1, [r2, #80]
	ldr	r2, [r2, #84]
	mov	r3, #1
	bl	VSetVec
	add	r2, r7, #0
	add	r2, r2, #32
	mov	r0, #1
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2, #88]
	ldr	r1, [r2, #92]
	ldr	r2, [r2, #96]
	mov	r3, #0
	bl	VSetVec
	add	r2, r7, #0
	add	r2, r2, #32
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #1
	str	r0, [sp, #4]
	ldr	r0, [r2, #100]
	ldr	r1, [r2, #104]
	ldr	r2, [r2, #108]
	mov	r3, #0
	bl	VSetVec
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r7, #0
	add	r1, r1, #32
	ldr	r0, [r0, #8]
	ldr	r1, [r1, #8]
	mul	r0, r0, r1
	asr	r1, r0, #14
	str	r1, [r7]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r7, #0
	add	r1, r1, #32
	ldr	r0, [r0, #4]
	ldr	r1, [r1, #4]
	mul	r0, r0, r1
	asr	r1, r0, #14
	str	r1, [r7, #4]
	ldr	r0, [r7, #16]
	lsl	r1, r0, #14
	add	r0, r1, #0
	mov	r1, #12
	bl	__divsi3
	str	r0, [r7, #8]
	ldr	r0, [r7, #4]
	ldr	r1, [r7]
	add	r0, r0, r1
	ldr	r1, [r7, #8]
	mul	r0, r0, r1
	asr	r1, r0, #14
	str	r1, [r7, #12]
	ldr	r0, [r7, #16]
	add	r2, r0, #0
	lsl	r1, r2, #1
	add	r1, r1, r0
	lsl	r2, r1, #3
	add	r2, r2, r0
	lsl	r0, r2, #10
	asr	r1, r0, #14
	ldr	r0, [r7, #12]
	add	r1, r0, r1
	str	r1, [r7, #12]
	add	r4, r7, #0
	add	r4, r4, #32
	mov	r0, #128
	lsl	r0, r0, #7
	ldr	r1, [r7, #12]
	bl	__divsi3
	str	r0, [r4, #20]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #208
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #212
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #216
	add	r1, r7, #0
	add	r1, r1, #32
	ldr	r2, [r1, #72]
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #220
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #224
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #228
	add	r1, r7, #0
	add	r1, r1, #32
	ldr	r2, [r1, #72]
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #232
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #236
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #240
	add	r1, r7, #0
	add	r1, r1, #32
	ldr	r2, [r1, #72]
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #244
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #248
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	add	r0, r0, #252
	add	r1, r7, #0
	add	r1, r1, #32
	ldr	r2, [r1, #72]
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #128
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #130
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #132
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r1, [r1, #72]
	ldr	r2, [r2, #12]
	add	r1, r1, r2
	str	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #134
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #136
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #138
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r1, [r1, #72]
	ldr	r2, [r2, #12]
	add	r1, r1, r2
	str	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #140
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #142
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #144
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r1, [r1, #72]
	ldr	r2, [r2, #12]
	add	r1, r1, r2
	str	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #146
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #4]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #64]
	add	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #148
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r3, [r2, #8]
	lsl	r2, r3, #14
	asr	r3, r2, #31
	lsr	r4, r3, #31
	add	r3, r2, r4
	asr	r2, r3, #1
	ldr	r1, [r1, #68]
	sub	r2, r1, r2
	str	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #32
	add	r1, r0, #0
	mov	r1, #150
	lsl	r1, r1, #1
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #32
	add	r2, r7, #0
	add	r2, r2, #32
	ldr	r1, [r1, #72]
	ldr	r2, [r2, #12]
	add	r1, r1, r2
	str	r1, [r0]
	mov	r0, #1
	b	.L18
.L20:
	.align	2
.L19:
	.word	6372
	.word	521
.L18:
	add	sp, sp, #28
	pop	{r4, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe3:
	.size	 Car_CarInit,.Lfe3-Car_CarInit
	.align	2
	.globl	Car_StartRace
	.type	 Car_StartRace,function
	.thumb_func
Car_StartRace:
	sub	sp, sp, #16
	push	{r4, r7, lr}
	mov	r7, sp
	add	r4, r7, #0
	add	r4, r4, #12
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
.L21:
	pop	{r4, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe4:
	.size	 Car_StartRace,.Lfe4-Car_StartRace
	.align	2
	.globl	Car_ComputeForces
	.type	 Car_ComputeForces,function
	.thumb_func
Car_ComputeForces:
	sub	sp, sp, #16
	push	{r4, r7, lr}
	add	sp, sp, #-16
	add	r7, sp, #8
	add	r4, r7, #0
	add	r4, r4, #20
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
	mov	r0, #0
	str	r0, [r7]
	add	r0, r7, #0
	add	r0, r0, #20
	add	r1, r7, #0
	add	r1, r1, #20
	mov	r1, #141
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #4
	add	r2, r0, r1
	add	r0, r2, #0
	add	r2, r2, #160
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	mov	r3, #0
	bl	VSetVec
	add	r0, r7, #0
	add	r0, r0, #20
	add	r1, r7, #0
	add	r1, r1, #20
	mov	r1, #141
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #4
	add	r2, r0, r1
	add	r0, r2, #0
	add	r2, r2, #148
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	mov	r3, #0
	bl	VSetVec
	mov	r0, #0
	bl	Controls_IsButtonPressed
	lsl	r1, r0, #24
	asr	r0, r1, #24
	cmp	r0, #0
	beq	.L23	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #20
	add	r1, r7, #0
	add	r1, r1, #20
	mov	r1, #141
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #4
	add	r2, r0, r1
	ldr	r0, [r2, #112]
	ldr	r1, [r2, #116]
	ldr	r2, [r2, #120]
	bl	Vlength
	add	r1, r0, #0
	ldr	r0, .L30
	bl	__divsi3
	str	r0, [r7]
.L23:
	mov	r0, #1
	bl	Controls_IsButtonPressed
	lsl	r1, r0, #24
	asr	r0, r1, #24
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldr	r0, [r7]
	add	r1, r0, #0
	sub	r1, r1, #19
	str	r1, [r7]
.L24:
	ldr	r0, [r7]
	cmp	r0, #0
	ble	.L25	@cond_branch
	ldr	r0, [r7]
	ldr	r2, .L30+4
	add	r1, r0, r2
	str	r1, [r7]
	ldr	r0, [r7]
	cmp	r0, #0
	bge	.L25	@cond_branch
	mov	r0, #0
	str	r0, [r7]
.L26:
.L25:
	mov	r0, #4
	bl	Controls_IsButtonPressed
	lsl	r1, r0, #24
	asr	r0, r1, #24
	cmp	r0, #0
	beq	.L27	@cond_branch
	mov	r0, #160
	lsl	r0, r0, #8
	str	r0, [r7, #4]
	add	r0, r7, #0
	add	r0, r0, #20
	add	r1, r7, #0
	add	r1, r1, #20
	mov	r1, #141
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #4
	add	r2, r0, r1
	add	r0, r2, #0
	add	r2, r2, #160
	ldr	r0, [r7]
	add	r1, r0, #0
	lsl	r0, r1, #12
	asr	r1, r0, #14
	ldr	r3, [r7, #4]
	mov	r0, r1
	mul	r0, r0, r3
	asr	r3, r0, #14
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	bl	VSetVec
	ldr	r0, [r7]
	add	r1, r0, #0
	lsl	r0, r1, #12
	asr	r1, r0, #14
	str	r1, [r7]
	b	.L28
.L31:
	.align	2
.L30:
	.word	-1018167296
	.word	-321126
.L27:
	mov	r0, #5
	bl	Controls_IsButtonPressed
	lsl	r1, r0, #24
	asr	r0, r1, #24
	cmp	r0, #0
	beq	.L28	@cond_branch
	mov	r0, #160
	lsl	r0, r0, #8
	str	r0, [r7, #4]
	add	r0, r7, #0
	add	r0, r0, #20
	add	r1, r7, #0
	add	r1, r1, #20
	mov	r1, #141
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #4
	add	r2, r0, r1
	add	r0, r2, #0
	add	r2, r2, #160
	ldr	r0, [r7]
	add	r1, r0, #0
	lsl	r0, r1, #12
	asr	r1, r0, #14
	ldr	r3, [r7, #4]
	mov	r0, r1
	mul	r0, r0, r3
	asr	r1, r0, #14
	neg	r3, r1
	mov	r0, #0
	str	r0, [sp]
	mov	r0, #0
	str	r0, [sp, #4]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	bl	VSetVec
	ldr	r0, [r7]
	add	r1, r0, #0
	lsl	r0, r1, #12
	asr	r1, r0, #14
	str	r1, [r7]
.L29:
.L28:
	add	r0, r7, #0
	add	r0, r0, #20
	add	r1, r7, #0
	add	r1, r1, #20
	mov	r1, #141
	lsl	r1, r1, #2
	add	r2, r7, r1
	ldr	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #4
	add	r2, r0, r1
	add	r0, r2, #0
	add	r2, r2, #148
	ldr	r0, [r7]
	str	r0, [sp]
	ldr	r0, .L32
	str	r0, [sp, #4]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	mov	r3, #0
	bl	VSetVec
.L22:
	add	sp, sp, #16
	pop	{r4, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.L33:
	.align	2
.L32:
	.word	-321126400
.Lfe5:
	.size	 Car_ComputeForces,.Lfe5-Car_ComputeForces
	.align	2
	.globl	Car_Integrate
	.type	 Car_Integrate,function
	.thumb_func
Car_Integrate:
	sub	sp, sp, #16
	push	{r4, r5, r7, lr}
	ldr	r4, .L36
	add	sp, sp, r4
	add	r7, sp, #60
	mov	r5, #167
	lsl	r5, r5, #2
	add	r4, r7, r5
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
	mov	r1, #167
	lsl	r1, r1, #2
	add	r0, r7, r1
	mov	r2, #152
	lsl	r2, r2, #3
	add	r1, r7, r2
	ldr	r0, [r1]
	mov	r3, #167
	lsl	r3, r3, #2
	add	r1, r7, r3
	ldr	r4, .L36+4
	add	r2, r7, r4
	ldr	r1, [r2]
	add	r2, r7, #0
	strb	r0, [r2]
	add	r0, r7, #1
	strb	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #40
	mov	r5, #167
	lsl	r5, r5, #2
	add	r1, r7, r5
	add	r3, r7, #1
	mov	r2, #0
	ldrsb	r2, [r3, r2]
	add	r4, r2, #0
	lsl	r3, r4, #4
	sub	r3, r3, r2
	lsl	r2, r3, #4
	add	r1, r1, r2
	add	r2, r1, #0
	add	r2, r2, #64
	add	r1, r2, #0
	mov	r2, #240
	bl	memcpy
	add	r1, r0, #0
	mov	r1, #140
	lsl	r1, r1, #1
	add	r0, r7, r1
	mov	r2, #167
	lsl	r2, r2, #2
	add	r1, r7, r2
	add	r3, r7, #0
	mov	r2, #0
	ldrsb	r2, [r3, r2]
	add	r4, r2, #0
	lsl	r3, r4, #4
	sub	r3, r3, r2
	lsl	r2, r3, #4
	add	r1, r1, r2
	add	r2, r1, #0
	add	r2, r2, #64
	add	r1, r2, #0
	mov	r2, #240
	bl	memcpy
	add	r3, r7, #0
	add	r3, r3, #40
	mov	r4, #167
	lsl	r4, r4, #2
	add	r0, r7, r4
	ldr	r5, .L36+8
	add	r1, r7, r5
	ldr	r0, [r1]
	str	r0, [sp]
	mov	r0, #133
	lsl	r0, r0, #2
	add	r1, r7, r0
	add	r0, r1, #0
	ldr	r1, [r3, #48]
	ldr	r2, [r3, #52]
	ldr	r3, [r3, #56]
	bl	VRetMulSca
	mov	r1, #133
	lsl	r1, r1, #2
	add	r0, r7, r1
	add	r3, r7, #0
	add	r3, r3, #40
	mov	r2, sp
	add	r1, r2, #0
	ldmia	r0!, {r2, r4, r5}
	stmia	r1!, {r2, r4, r5}
	mov	r0, #130
	lsl	r0, r0, #2
	add	r2, r7, r0
	add	r0, r2, #0
	ldr	r1, [r3]
	ldr	r2, [r3, #4]
	ldr	r3, [r3, #8]
	bl	VRetAdd
	mov	r1, #130
	lsl	r1, r1, #2
	add	r0, r7, r1
	mov	r3, #140
	lsl	r3, r3, #1
	add	r2, r7, r3
	mov	r3, sp
	add	r1, r3, #0
	add	r4, r0, #4
	ldmia	r4!, {r3, r5}
	stmia	r1!, {r3, r5}
	ldr	r3, [r0]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	bl	Vequ
	add	r3, r7, #4
	add	r1, r7, #0
	add	r1, r1, #40
	add	r2, sp, #20
	add	r0, r2, #0
	add	r1, r1, #60
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	mov	r2, sp
	add	r1, r2, #0
	add	r2, r3, #0
	add	r2, r2, #16
	ldmia	r2!, {r0, r4, r5}
	stmia	r1!, {r0, r4, r5}
	ldmia	r2!, {r4, r5}
	stmia	r1!, {r4, r5}
	ldr	r0, [r3]
	ldr	r1, [r3, #4]
	ldr	r2, [r3, #8]
	ldr	r3, [r3, #12]
	bl	MCreateSkewSymmetricMatrix
	add	r0, r7, #4
	add	r2, r7, #0
	add	r2, r2, #40
	add	r3, sp, #24
	add	r1, r3, #0
	add	r2, r2, #12
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	mov	r3, sp
	add	r2, r3, #0
	add	r3, r0, #0
	add	r3, r3, #12
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldr	r1, [r0]
	ldr	r2, [r0, #4]
	ldr	r3, [r0, #8]
	mov	r0, #154
	lsl	r0, r0, #2
	add	r4, r7, r0
	add	r0, r4, #0
	bl	MRetMul
	mov	r1, #154
	lsl	r1, r1, #2
	add	r0, r7, r1
	mov	r2, #167
	lsl	r2, r2, #2
	add	r1, r7, r2
	ldr	r3, .L36+8
	add	r2, r7, r3
	ldr	r1, [r2]
	str	r1, [sp, #24]
	mov	r1, sp
	add	r2, r1, #0
	add	r3, r0, #0
	add	r3, r3, #12
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldr	r1, [r0]
	ldr	r2, [r0, #4]
	ldr	r3, [r0, #8]
	mov	r5, #145
	lsl	r5, r5, #2
	add	r4, r7, r5
	add	r0, r4, #0
	bl	MRetMulSca
	mov	r0, #145
	lsl	r0, r0, #2
	add	r2, r7, r0
	add	r0, r7, #0
	add	r0, r0, #40
	add	r3, sp, #24
	add	r1, r3, #0
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	mov	r3, sp
	add	r2, r3, #0
	add	r3, r0, #0
	add	r3, r3, #24
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
	ldr	r3, [r0, #20]
	mov	r0, #136
	lsl	r0, r0, #2
	add	r4, r7, r0
	add	r0, r4, #0
	bl	MRetAdd
	mov	r2, #136
	lsl	r2, r2, #2
	add	r1, r7, r2
	mov	r4, #140
	lsl	r4, r4, #1
	add	r3, r7, r4
	add	r2, sp, #20
	add	r0, r2, #0
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	mov	r2, sp
	add	r1, r2, #0
	add	r2, r3, #0
	add	r2, r2, #28
	ldmia	r2!, {r0, r4, r5}
	stmia	r1!, {r0, r4, r5}
	ldmia	r2!, {r0, r5}
	stmia	r1!, {r0, r5}
	ldr	r0, [r3, #12]
	ldr	r1, [r3, #16]
	ldr	r2, [r3, #20]
	ldr	r3, [r3, #24]
	bl	Mequ
	add	r3, r7, #0
	add	r3, r3, #40
	mov	r1, #167
	lsl	r1, r1, #2
	add	r0, r7, r1
	ldr	r2, .L36+8
	add	r1, r7, r2
	mov	r4, #167
	lsl	r4, r4, #2
	add	r0, r7, r4
	ldr	r1, [r1]
	ldr	r2, [r0, #16]
	mov	r0, r1
	mul	r0, r0, r2
	asr	r1, r0, #14
	str	r1, [sp]
	mov	r5, #133
	lsl	r5, r5, #2
	add	r1, r7, r5
	add	r0, r1, #0
	ldr	r1, [r3, #84]
	ldr	r2, [r3, #88]
	ldr	r3, [r3, #92]
	bl	VRetMulSca
	mov	r1, #133
	lsl	r1, r1, #2
	add	r0, r7, r1
	add	r3, r7, #0
	add	r3, r3, #40
	mov	r2, sp
	add	r1, r2, #0
	ldmia	r0!, {r2, r4, r5}
	stmia	r1!, {r2, r4, r5}
	mov	r0, #130
	lsl	r0, r0, #2
	add	r2, r7, r0
	add	r0, r2, #0
	ldr	r1, [r3, #48]
	ldr	r2, [r3, #52]
	ldr	r3, [r3, #56]
	bl	VRetAdd
	mov	r1, #130
	lsl	r1, r1, #2
	add	r0, r7, r1
	mov	r3, #140
	lsl	r3, r3, #1
	add	r2, r7, r3
	mov	r3, sp
	add	r1, r3, #0
	add	r4, r0, #4
	ldmia	r4!, {r3, r5}
	stmia	r1!, {r3, r5}
	ldr	r3, [r0]
	ldr	r0, [r2, #48]
	ldr	r1, [r2, #52]
	ldr	r2, [r2, #56]
	bl	Vequ
	add	r3, r7, #0
	add	r3, r3, #40
	mov	r4, #167
	lsl	r4, r4, #2
	add	r0, r7, r4
	ldr	r5, .L36+8
	add	r1, r7, r5
	ldr	r0, [r1]
	str	r0, [sp]
	mov	r0, #133
	lsl	r0, r0, #2
	add	r1, r7, r0
	add	r0, r1, #0
	ldr	r1, [r3, #96]
	ldr	r2, [r3, #100]
	ldr	r3, [r3, #104]
	bl	VRetMulSca
	mov	r1, #133
	lsl	r1, r1, #2
	add	r0, r7, r1
	add	r3, r7, #0
	add	r3, r3, #40
	mov	r2, sp
	add	r1, r2, #0
	ldmia	r0!, {r2, r4, r5}
	stmia	r1!, {r2, r4, r5}
	mov	r0, #130
	lsl	r0, r0, #2
	add	r2, r7, r0
	add	r0, r2, #0
	ldr	r1, [r3, #72]
	ldr	r2, [r3, #76]
	ldr	r3, [r3, #80]
	bl	VRetAdd
	mov	r1, #130
	lsl	r1, r1, #2
	add	r0, r7, r1
	mov	r3, #140
	lsl	r3, r3, #1
	add	r2, r7, r3
	mov	r3, sp
	add	r1, r3, #0
	add	r4, r0, #4
	ldmia	r4!, {r3, r5}
	stmia	r1!, {r3, r5}
	ldr	r3, [r0]
	ldr	r0, [r2, #72]
	ldr	r1, [r2, #76]
	ldr	r2, [r2, #80]
	bl	Vequ
	mov	r4, #140
	lsl	r4, r4, #1
	add	r3, r7, r4
	mov	r0, sp
	add	r1, r0, #0
	add	r2, r3, #0
	add	r2, r2, #28
	ldmia	r2!, {r0, r4, r5}
	stmia	r1!, {r0, r4, r5}
	ldmia	r2!, {r0, r5}
	stmia	r1!, {r0, r5}
	ldr	r0, [r3, #12]
	ldr	r1, [r3, #16]
	ldr	r2, [r3, #20]
	ldr	r3, [r3, #24]
	bl	MOrthonormalizeOrientation
	mov	r1, #140
	lsl	r1, r1, #1
	add	r0, r7, r1
	mov	r1, sp
	add	r2, r1, #0
	add	r3, r0, #0
	add	r3, r3, #24
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
	ldr	r3, [r0, #20]
	mov	r5, #148
	lsl	r5, r5, #2
	add	r4, r7, r5
	add	r0, r4, #0
	bl	Mtranspose
	mov	r0, #148
	lsl	r0, r0, #2
	add	r2, r7, r0
	mov	r1, #167
	lsl	r1, r1, #2
	add	r0, r7, r1
	add	r3, sp, #24
	add	r1, r3, #0
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	mov	r3, sp
	add	r2, r3, #0
	add	r3, r0, #0
	add	r3, r3, #40
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldr	r1, [r0, #28]
	ldr	r2, [r0, #32]
	ldr	r3, [r0, #36]
	mov	r0, #139
	lsl	r0, r0, #2
	add	r4, r7, r0
	add	r0, r4, #0
	bl	MRetMul
	mov	r1, #139
	lsl	r1, r1, #2
	add	r2, r7, r1
	mov	r3, #140
	lsl	r3, r3, #1
	add	r0, r7, r3
	add	r3, sp, #24
	add	r1, r3, #0
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	mov	r3, sp
	add	r2, r3, #0
	add	r3, r0, #0
	add	r3, r3, #24
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldmia	r3!, {r1, r4, r5}
	stmia	r2!, {r1, r4, r5}
	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
	ldr	r3, [r0, #20]
	mov	r5, #130
	lsl	r5, r5, #2
	add	r4, r7, r5
	add	r0, r4, #0
	bl	MRetMul
	mov	r0, #130
	lsl	r0, r0, #2
	add	r1, r7, r0
	mov	r2, #140
	lsl	r2, r2, #1
	add	r3, r7, r2
	add	r2, sp, #20
	add	r0, r2, #0
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	mov	r2, sp
	add	r1, r2, #0
	add	r2, r3, #0
	b	.L35
.L37:
	.align	2
.L36:
	.word	-712
	.word	1220
	.word	1212
.L35:
	add	r2, r2, #124
	ldmia	r2!, {r0, r4, r5}
	stmia	r1!, {r0, r4, r5}
	ldmia	r2!, {r4, r5}
	stmia	r1!, {r4, r5}
	ldr	r0, [r3, #108]
	ldr	r1, [r3, #112]
	ldr	r2, [r3, #116]
	ldr	r3, [r3, #120]
	bl	Mequ
	mov	r0, #140
	lsl	r0, r0, #1
	add	r3, r7, r0
	mov	r2, #140
	lsl	r2, r2, #1
	add	r1, r7, r2
	mov	r2, sp
	add	r0, r2, #0
	add	r1, r1, #108
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	mov	r4, #130
	lsl	r4, r4, #2
	add	r2, r7, r4
	add	r0, r2, #0
	ldr	r1, [r3, #72]
	ldr	r2, [r3, #76]
	ldr	r3, [r3, #80]
	bl	VRetMulVec
	mov	r5, #130
	lsl	r5, r5, #2
	add	r0, r7, r5
	mov	r1, #140
	lsl	r1, r1, #1
	add	r2, r7, r1
	mov	r3, sp
	add	r1, r3, #0
	add	r4, r0, #4
	ldmia	r4!, {r3, r5}
	stmia	r1!, {r3, r5}
	ldr	r3, [r0]
	ldr	r0, [r2, #60]
	ldr	r1, [r2, #64]
	ldr	r2, [r2, #68]
	bl	Vequ
.L34:
	mov	r3, #178
	lsl	r3, r3, #2
	add	sp, sp, r3
	pop	{r4, r5, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe6:
	.size	 Car_Integrate,.Lfe6-Car_Integrate
	.section .rodata
	.align	2
.LC1:
	.word	CollisionState
.text
	.align	2
	.globl	Car_CheckForCollisions
	.type	 Car_CheckForCollisions,function
	.thumb_func
Car_CheckForCollisions:
	sub	sp, sp, #16
	push	{r4, r5, r7, lr}
	add	sp, sp, #-320
	add	r7, sp, #12
	mov	r5, #162
	lsl	r5, r5, #1
	add	r4, r7, r5
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
	add	r0, r7, #0
	mov	r0, #140
	lsl	r0, r0, #1
	add	r1, r7, r0
	ldr	r0, .L44
	str	r0, [r1]
	ldr	r0, .L44+4
	mov	r1, #2
	str	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #36
	mov	r1, #0
	strh	r1, [r0]
.L39:
	add	r0, r7, #0
	add	r0, r0, #36
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #7
	bgt	.L43	@cond_branch
	ldr	r0, .L44+4
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L42	@cond_branch
	b	.L43
.L45:
	.align	2
.L44:
	.word 0x3a83126f	@ float 1.00000004749745130539e-3
	.word	CollisionState
.L43:
	b	.L40
.L42:
	add	r0, r7, #0
	add	r0, r0, #40
	mov	r3, #162
	lsl	r3, r3, #1
	add	r1, r7, r3
	mov	r4, #162
	lsl	r4, r4, #1
	add	r2, r7, r4
	mov	r5, #217
	lsl	r5, r5, #2
	add	r3, r7, r5
	ldr	r2, [r3]
	add	r4, r2, #0
	lsl	r3, r4, #4
	sub	r3, r3, r2
	lsl	r2, r3, #4
	add	r1, r1, r2
	add	r2, r1, #0
	add	r2, r2, #64
	add	r1, r2, #0
	mov	r2, #240
	bl	memcpy
	add	r2, r7, #0
	add	r0, r7, #0
	add	r0, r0, #40
	add	r3, r7, #0
	add	r3, r3, #36
	mov	r4, #0
	ldrsh	r1, [r3, r4]
	add	r4, r1, #0
	lsl	r3, r4, #1
	add	r3, r3, r1
	lsl	r1, r3, #2
	add	r0, r0, r1
	add	r1, r0, #0
	add	r0, r0, #144
	mov	r3, sp
	add	r1, r3, #0
	add	r4, r0, #4
	ldmia	r4!, {r3, r5}
	stmia	r1!, {r3, r5}
	ldr	r3, [r0]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	bl	Vequ
	add	r3, r7, #0
	add	r1, r7, #0
	add	r1, r1, #40
	mov	r2, sp
	add	r0, r2, #0
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	mov	r4, #142
	lsl	r4, r4, #1
	add	r2, r7, r4
	add	r0, r2, #0
	ldr	r1, [r3]
	ldr	r2, [r3, #4]
	ldr	r3, [r3, #8]
	bl	VRetSub
	mov	r5, #142
	lsl	r5, r5, #1
	add	r0, r7, r5
	add	r2, r7, #0
	add	r2, r2, #12
	mov	r3, sp
	add	r1, r3, #0
	add	r4, r0, #4
	ldmia	r4!, {r3, r5}
	stmia	r1!, {r3, r5}
	ldr	r3, [r0]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	bl	Vequ
	add	r3, r7, #0
	add	r3, r3, #40
	add	r1, r7, #0
	add	r1, r1, #12
	mov	r2, sp
	add	r0, r2, #0
	ldmia	r1!, {r2, r4, r5}
	stmia	r0!, {r2, r4, r5}
	mov	r0, #148
	lsl	r0, r0, #1
	add	r2, r7, r0
	add	r0, r2, #0
	ldr	r1, [r3, #60]
	ldr	r2, [r3, #64]
	ldr	r3, [r3, #68]
	bl	Vcross
	mov	r1, #148
	lsl	r1, r1, #1
	add	r0, r7, r1
	add	r3, r7, #0
	add	r3, r3, #40
	mov	r2, sp
	add	r1, r2, #0
	ldmia	r0!, {r2, r4, r5}
	stmia	r1!, {r2, r4, r5}
	mov	r0, #142
	lsl	r0, r0, #1
	add	r2, r7, r0
	add	r0, r2, #0
	ldr	r1, [r3, #48]
	ldr	r2, [r3, #52]
	ldr	r3, [r3, #56]
	bl	VRetAdd
	mov	r1, #142
	lsl	r1, r1, #1
	add	r0, r7, r1
	add	r2, r7, #0
	add	r2, r2, #24
	mov	r3, sp
	add	r1, r3, #0
	add	r4, r0, #4
	ldmia	r4!, {r3, r5}
	stmia	r1!, {r3, r5}
	ldr	r3, [r0]
	ldr	r0, [r2]
	ldr	r1, [r2, #4]
	ldr	r2, [r2, #8]
	bl	Vequ
.L41:
	add	r1, r7, #0
	add	r1, r1, #36
	add	r0, r7, #0
	add	r0, r0, #36
	add	r1, r7, #0
	add	r1, r1, #36
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L39
.L40:
	ldr	r0, .L46
	ldr	r1, [r0]
	add	r0, r1, #0
	b	.L38
.L47:
	.align	2
.L46:
	.word	CollisionState
.L38:
	add	sp, sp, #320
	pop	{r4, r5, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe7:
	.size	 Car_CheckForCollisions,.Lfe7-Car_CheckForCollisions
	.align	2
	.globl	Car_ResolveCollisions
	.type	 Car_ResolveCollisions,function
	.thumb_func
Car_ResolveCollisions:
	sub	sp, sp, #16
	push	{r4, r7, lr}
	mov	r7, sp
	add	r4, r7, #0
	add	r4, r4, #12
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
.L48:
	pop	{r4, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe8:
	.size	 Car_ResolveCollisions,.Lfe8-Car_ResolveCollisions
	.align	2
	.globl	Car_CalculateVertices
	.type	 Car_CalculateVertices,function
	.thumb_func
Car_CalculateVertices:
	sub	sp, sp, #16
	push	{r4, r7, lr}
	mov	r7, sp
	add	r4, r7, #0
	add	r4, r4, #12
	str	r0, [r4]
	str	r1, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r4, #12]
.L49:
	pop	{r4, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe9:
	.size	 Car_CalculateVertices,.Lfe9-Car_CalculateVertices
	.comm	Controls_CurrentButtonState, 4	@ 2
	.comm	Controls_PreviousButtonState, 4	@ 2
	.comm	CollisionState, 4	@ 4
