@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2
	.globl	IntrDummy
	.type	 IntrDummy,function
	.thumb_func
IntrDummy:
	push	{r7, lr}
	mov	r7, sp
.L2:
	pop	{r7}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 IntrDummy,.Lfe1-IntrDummy
	.align	2
	.type	 VBlankIntr,function
	.thumb_func
VBlankIntr:
	push	{r7, lr}
	mov	r7, sp
.L3:
	pop	{r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankIntr,.Lfe2-VBlankIntr
	.align	2
	.type	 KeyRead,function
	.thumb_func
KeyRead:
	push	{r7, lr}
	mov	r7, sp
.L4:
	pop	{r7}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 KeyRead,.Lfe3-KeyRead
	.globl	IntrTable_0
	.section .rodata
	.align	2
	.type	 IntrTable_0,object
	.size	 IntrTable_0,56
IntrTable_0:
	.word	VBlankIntr
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
.text
	.align	2
	.globl	AGBmain
	.type	 AGBmain,function
	.thumb_func
AGBmain:
	push	{r7, lr}
	add	sp, sp, #-12
	add	r7, sp, #4
	mov	r0, #0
	bl	Graphics_Init
	bl	Controls_Init
	bl	Sound_Init
	mov	r0, #0
	mov	r1, #0
	mov	r2, #0
	bl	Graphics_GetIndexFromPalette
	add	r1, r0, #0
	add	r0, r7, #4
	ldrb	r2, [r0]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r1, [r7, #4]
	add	r0, r1, #0
	bl	Graphics_ClearScreen
	mov	r0, #1
	mov	r1, #63
	mov	r2, #63
	mov	r3, #192
	bl	Graphics_SetPaletteColour
.L6:
	b	.L8
	b	.L7
.L8:
	add	r0, r7, #0
	mov	r1, #0
	strh	r1, [r0]
.L9:
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #159
	ble	.L12	@cond_branch
	b	.L10
.L12:
	add	r0, r7, #0
	ldrh	r2, [r0]
	add	r1, r2, #0
	add	r0, r7, #4
	ldrb	r2, [r0]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0]
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r7, #0
	ldrh	r2, [r0]
	mov	r3, #160
	sub	r0, r3, r2
	add	r2, r0, #0
	lsl	r0, r2, #16
	asr	r3, r0, #16
	ldr	r0, [r7, #4]
	str	r0, [sp]
	mov	r0, #0
	mov	r2, #240
	bl	Graphics_DrawLineXYXY
	bl	Graphics_SwapScreens
.L11:
	add	r1, r7, #0
	add	r0, r7, #0
	add	r1, r7, #0
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L9
.L10:
	b	.L6
.L7:
	mov	r0, #0
	b	.L5
.L5:
	add	sp, sp, #12
	pop	{r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 AGBmain,.Lfe4-AGBmain
	.comm	Graphics_DisplayMode, 4	@ 1
	.comm	Graphics_ActiveScreen, 4	@ 1
	.comm	Graphics_WorkingBuffer, 4	@ 4
	.comm	Graphics_Buffer, 16	@ 16
	.comm	CurrentButtonState, 4	@ 2
	.comm	PreviousButtonState, 4	@ 2
	.comm	IntrTable, 60	@ 60
