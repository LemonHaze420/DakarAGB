@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2
.LC0:
	.word	Interrupts_Check
	.align	2
.LC1:
	.word	fps
.text
	.align	2
	.globl	Dakar_GameVerticalBlank
	.type	 Dakar_GameVerticalBlank,function
	.thumb_func
Dakar_GameVerticalBlank:
	push	{r7, lr}
	mov	r7, sp
	ldr	r0, .L3
	ldr	r1, .L3
	ldrh	r2, [r1]
	mov	r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, .L3+4
	ldr	r1, .L3+4
	ldrh	r2, [r1]
	mov	r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r1, .L3+8
	ldr	r0, .L3+8
	ldr	r1, .L3+8
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
.L2:
	pop	{r7, pc}
.L4:
	.align	2
.L3:
	.word	Interrupts_Check
	.word	67109378
	.word	fps
.Lfe1:
	.size	 Dakar_GameVerticalBlank,.Lfe1-Dakar_GameVerticalBlank
	.align	2
	.globl	Dakar_GameHorizontalBlank
	.type	 Dakar_GameHorizontalBlank,function
	.thumb_func
Dakar_GameHorizontalBlank:
	push	{r7, lr}
	mov	r7, sp
.L5:
	pop	{r7, pc}
.Lfe2:
	.size	 Dakar_GameHorizontalBlank,.Lfe2-Dakar_GameHorizontalBlank
	.section .rodata
	.align	2
.LC2:
	.word	CamScale
.text
	.align	2
	.globl	Dakar_SetCamera
	.type	 Dakar_SetCamera,function
	.thumb_func
Dakar_SetCamera:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r0, r7, #0
	mov	r1, #1
	strh	r1, [r0]
.L7:
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #79
	ble	.L10	@cond_branch
	b	.L8
.L10:
	ldr	r0, .L11
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r4, r0, r2
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	mov	r0, #128
	lsl	r0, r0, #7
	bl	__divsi3
	str	r0, [r4]
.L9:
	add	r1, r7, #0
	add	r0, r7, #0
	add	r1, r7, #0
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L7
.L12:
	.align	2
.L11:
	.word	CamScale
.L8:
.L6:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.Lfe3:
	.size	 Dakar_SetCamera,.Lfe3-Dakar_SetCamera
	.section .rodata
	.align	2
.LC3:
	.word	fps
	.align	2
.LC4:
	.word	Col
	.align	2
.LC5:
	.word	Graphics_Buffer
	.align	2
.LC6:
	.word	Graphics_ActiveScreen
	.align	2
.LC7:
	.word	Dakar_ViewPosition
	.align	2
.LC8:
	.word	Map_Alt
	.align	2
.LC9:
	.word	sin_cos_table
	.align	2
.LC10:
	.word	Dakar_ViewDirection
	.align	2
.LC11:
	.word	CamScale
	.align	2
.LC12:
	.word	method
.text
	.align	2
	.globl	Dakar_Render
	.type	 Dakar_Render,function
	.thumb_func
Dakar_Render:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-48
	mov	r7, sp
	ldr	r0, .L53
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, .L53+4
	ldrb	r1, [r0]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r0, .L53+4
	ldr	r1, [r0]
	add	r0, r1, #0
	bl	Graphics_ClearScreen
	ldr	r0, .L53+8
	ldr	r2, .L53+12
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldr	r1, [r0]
	str	r1, [r7, #32]
	add	r0, r7, #0
	mov	r1, #0
	strb	r1, [r0]
.L14:
	add	r0, r7, #0
	ldrb	r1, [r0]
	cmp	r1, #159
	bls	.L17	@cond_branch
	b	.L15
.L54:
	.align	2
.L53:
	.word	fps
	.word	Col
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.L17:
	add	r1, r7, #0
	ldrb	r0, [r1]
	add	r2, r0, #0
	lsl	r1, r2, #4
	sub	r1, r1, r0
	lsl	r0, r1, #4
	ldr	r1, [r7, #32]
	add	r0, r1, r0
	str	r0, [r7, #28]
	add	r0, r7, #6
	ldr	r1, .L55
	ldrh	r2, [r1]
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #8
	ldr	r1, .L55
	ldrh	r2, [r1, #2]
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #8
	ldrh	r1, [r0]
	mov	r2, #254
	lsl	r2, r2, #7
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #16
	asr	r0, r1, #16
	add	r1, r7, #6
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	asr	r1, r2, #8
	add	r3, r1, #0
	lsl	r2, r3, #16
	asr	r1, r2, #16
	add	r0, r0, r1
	ldr	r1, .L55+4
	add	r0, r1, r0
	str	r0, [r7, #24]
	add	r0, r7, #0
	add	r0, r0, #18
	ldr	r1, [r7, #24]
	sub	r2, r1, #1
	ldrb	r1, [r2]
	add	r2, r7, #6
	ldrh	r3, [r2]
	mov	r6, #255
	add	r2, r3, #0
	and	r2, r2, r6
	add	r6, r2, #0
	lsl	r3, r6, #16
	asr	r2, r3, #16
	mov	r3, #128
	lsl	r3, r3, #1
	sub	r2, r3, r2
	mul	r1, r1, r2
	ldr	r2, [r7, #24]
	add	r3, r2, #1
	ldrb	r2, [r3]
	add	r3, r7, #6
	ldrh	r6, [r3]
	mov	r3, #255
	mov	r8, r3
	mov	r3, r8
	and	r3, r3, r6
	mov	r8, r3
	mov	r3, r8
	lsl	r6, r3, #16
	asr	r3, r6, #16
	mul	r2, r2, r3
	add	r1, r1, r2
	ldr	r2, [r7, #24]
	ldr	r6, .L55+8
	add	r3, r2, r6
	ldrb	r2, [r3]
	add	r3, r7, #0
	add	r3, r3, #8
	ldrh	r6, [r3]
	mov	r3, #255
	mov	r8, r3
	mov	r3, r8
	and	r3, r3, r6
	mov	r8, r3
	mov	r3, r8
	lsl	r6, r3, #16
	asr	r3, r6, #16
	mov	r6, #128
	lsl	r6, r6, #1
	sub	r3, r6, r3
	mul	r2, r2, r3
	add	r1, r1, r2
	ldr	r2, [r7, #24]
	mov	r6, #128
	lsl	r6, r6, #1
	add	r3, r2, r6
	ldrb	r2, [r3]
	add	r3, r7, #0
	add	r3, r3, #8
	ldrh	r6, [r3]
	mov	r3, #255
	mov	r8, r3
	mov	r3, r8
	and	r3, r3, r6
	mov	r8, r3
	mov	r3, r8
	lsl	r6, r3, #16
	asr	r3, r6, #16
	mul	r2, r2, r3
	add	r1, r1, r2
	asr	r2, r1, #1
	add	r1, r2, #0
	mov	r6, #160
	lsl	r6, r6, #4
	add	r2, r1, r6
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #10
	ldr	r1, .L55+12
	ldr	r3, .L55+16
	mov	r6, #2
	ldrsh	r2, [r3, r6]
	add	r3, r7, #0
	ldrb	r6, [r3]
	add	r3, r6, #0
	sub	r3, r3, #80
	asr	r6, r3, #1
	add	r2, r2, r6
	mov	r3, #255
	and	r2, r2, r3
	add	r3, r2, #0
	lsl	r2, r3, #1
	add	r1, r1, r2
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	asr	r1, r2, #2
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #12
	ldr	r1, .L55+12
	ldr	r3, .L55+16
	mov	r6, #2
	ldrsh	r2, [r3, r6]
	add	r3, r7, #0
	ldrb	r6, [r3]
	add	r3, r6, #0
	sub	r3, r3, #80
	asr	r6, r3, #1
	add	r2, r2, r6
	mov	r3, #255
	and	r2, r2, r3
	add	r3, r2, #0
	add	r3, r3, #64
	add	r2, r3, #0
	lsl	r3, r2, #1
	add	r1, r1, r3
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	asr	r1, r2, #2
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #2
	mov	r1, #0
	strh	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r1, #11
	strb	r1, [r0]
.L18:
	add	r0, r7, #0
	add	r0, r0, #16
	ldrb	r1, [r0]
	cmp	r1, #29
	bls	.L21	@cond_branch
	b	.L16
.L56:
	.align	2
.L55:
	.word	Dakar_ViewPosition
	.word	Map_Alt
	.word	-256
	.word	sin_cos_table
	.word	Dakar_ViewDirection
.L21:
	add	r0, r7, #6
	add	r1, r7, #6
	add	r2, r7, #0
	add	r2, r2, #10
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	add	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #8
	add	r1, r7, #0
	add	r1, r1, #8
	add	r2, r7, #0
	add	r2, r2, #12
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	add	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #14
	add	r1, r7, #6
	ldrh	r2, [r1]
	add	r1, r2, #0
	mov	r2, #0
	bic	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #15
	add	r1, r7, #0
	add	r1, r1, #8
	ldrh	r2, [r1]
	add	r1, r2, #0
	mov	r2, #0
	bic	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #8
	ldrh	r1, [r0]
	mov	r2, #254
	lsl	r2, r2, #7
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #16
	asr	r0, r1, #16
	add	r1, r7, #6
	mov	r6, #0
	ldrsh	r2, [r1, r6]
	asr	r1, r2, #8
	add	r3, r1, #0
	lsl	r2, r3, #16
	asr	r1, r2, #16
	add	r0, r0, r1
	ldr	r1, .L57
	add	r0, r1, r0
	str	r0, [r7, #24]
	add	r0, r7, #0
	add	r0, r0, #20
	ldr	r1, [r7, #24]
	sub	r2, r1, #1
	ldrb	r1, [r2]
	add	r2, r7, #0
	add	r2, r2, #14
	ldrb	r3, [r2]
	mov	r6, #128
	lsl	r6, r6, #1
	sub	r2, r6, r3
	mul	r1, r1, r2
	ldr	r2, [r7, #24]
	add	r3, r2, #1
	ldrb	r2, [r3]
	add	r3, r7, #0
	add	r3, r3, #14
	ldrb	r6, [r3]
	mul	r2, r2, r6
	add	r1, r1, r2
	ldr	r2, [r7, #24]
	ldr	r6, .L57+4
	add	r3, r2, r6
	ldrb	r2, [r3]
	add	r3, r7, #0
	add	r3, r3, #15
	ldrb	r6, [r3]
	str	r6, [r7, #40]
	mov	r3, #128
	lsl	r3, r3, #1
	mov	r8, r3
	mov	r6, r8
	ldr	r3, [r7, #40]
	sub	r6, r6, r3
	str	r6, [r7, #44]
	ldr	r6, [r7, #44]
	mul	r2, r2, r6
	add	r1, r1, r2
	ldr	r2, [r7, #24]
	mov	r6, #128
	lsl	r6, r6, #1
	add	r3, r2, r6
	ldrb	r2, [r3]
	add	r3, r7, #0
	add	r3, r3, #15
	ldrb	r6, [r3]
	mul	r2, r2, r6
	add	r1, r1, r2
	asr	r2, r1, #1
	add	r1, r7, #0
	add	r1, r1, #18
	ldrh	r1, [r1]
	sub	r2, r2, r1
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r7, #4
	add	r2, r7, #0
	add	r2, r2, #20
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	ldr	r2, .L57+8
	add	r3, r7, #0
	add	r3, r3, #16
	ldrb	r6, [r3]
	add	r3, r6, #0
	lsl	r6, r3, #2
	add	r2, r2, r6
	ldr	r3, [r2]
	mul	r1, r1, r3
	asr	r2, r1, #8
	asr	r1, r2, #8
	add	r2, r1, #0
	add	r1, r2, #0
	add	r1, r1, #53
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #4
	mov	r6, #0
	ldrsh	r1, [r0, r6]
	cmp	r1, #0
	bge	.L22	@cond_branch
	b	.L20
.L58:
	.align	2
.L57:
	.word	Map_Alt
	.word	-256
	.word	CamScale
.L22:
	add	r0, r7, #4
	add	r1, r7, #2
	mov	r2, #0
	ldrsh	r0, [r0, r2]
	mov	r3, #0
	ldrsh	r1, [r1, r3]
	cmp	r0, r1
	bgt	.LCB546
	b	.L20	@long jump
.LCB546:
	ldr	r0, .L59
	ldr	r1, .L59+4
	add	r3, r7, #0
	add	r3, r3, #8
	mov	r6, #0
	ldrsh	r2, [r3, r6]
	add	r3, r7, #6
	str	r3, [r7, #44]
	ldr	r6, [r7, #44]
	mov	r3, #0
	ldrsh	r6, [r6, r3]
	str	r6, [r7, #40]
	ldr	r6, [r7, #40]
	asr	r3, r6, #8
	mov	r8, r3
	mov	r3, r8
	lsl	r6, r3, #16
	asr	r3, r6, #16
	add	r2, r2, r3
	add	r1, r1, r2
	ldrb	r4, [r1]
	add	r1, r7, #0
	add	r1, r1, #16
	ldrb	r2, [r1]
	lsr	r1, r2, #1
	add	r3, r1, #0
	lsl	r2, r3, #24
	lsr	r1, r2, #24
	sub	r4, r4, r1
	add	r4, r4, #40
	add	r1, r7, #6
	mov	r6, #0
	ldrsh	r2, [r1, r6]
	asr	r1, r2, #8
	add	r3, r1, #0
	lsl	r2, r3, #16
	asr	r1, r2, #16
	asr	r2, r1, #31
	lsr	r3, r2, #31
	add	r6, r1, r3
	asr	r2, r6, #1
	add	r3, r2, #0
	lsl	r2, r3, #1
	sub	r1, r1, r2
	add	r2, r7, #0
	add	r2, r2, #8
	mov	r6, #0
	ldrsh	r3, [r2, r6]
	asr	r2, r3, #8
	add	r6, r2, #0
	lsl	r3, r6, #16
	asr	r2, r3, #16
	asr	r3, r2, #31
	lsr	r6, r3, #31
	add	r3, r2, r6
	mov	r8, r3
	mov	r6, r8
	asr	r3, r6, #1
	add	r6, r3, #0
	lsl	r3, r6, #1
	sub	r2, r2, r3
	lsl	r3, r1, #16
	asr	r1, r3, #16
	lsl	r3, r2, #16
	asr	r2, r3, #16
	cmp	r1, r2
	beq	.L26	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #10
	cmp	r1, #159
	ble	.L27	@cond_branch
	b	.L24
.L60:
	.align	2
.L59:
	.word	Col
	.word	Map_Alt
.L26:
	add	r1, r4, #0
	sub	r1, r1, #10
	cmp	r1, #159
	ble	.L27	@cond_branch
	b	.L24
.L27:
	ldr	r1, .L61
	add	r3, r7, #0
	add	r3, r3, #8
	mov	r6, #0
	ldrsh	r2, [r3, r6]
	add	r3, r7, #6
	str	r3, [r7, #44]
	ldr	r6, [r7, #44]
	mov	r3, #0
	ldrsh	r6, [r6, r3]
	str	r6, [r7, #40]
	ldr	r6, [r7, #40]
	asr	r3, r6, #8
	mov	r8, r3
	mov	r3, r8
	lsl	r6, r3, #16
	asr	r3, r6, #16
	add	r2, r2, r3
	add	r1, r1, r2
	ldrb	r5, [r1]
	add	r1, r7, #0
	add	r1, r1, #16
	ldrb	r2, [r1]
	lsr	r1, r2, #1
	add	r3, r1, #0
	lsl	r2, r3, #24
	lsr	r1, r2, #24
	sub	r5, r5, r1
	add	r5, r5, #40
	add	r1, r7, #6
	mov	r6, #0
	ldrsh	r2, [r1, r6]
	asr	r1, r2, #8
	add	r3, r1, #0
	lsl	r2, r3, #16
	asr	r1, r2, #16
	asr	r2, r1, #31
	lsr	r3, r2, #31
	add	r6, r1, r3
	asr	r2, r6, #1
	add	r3, r2, #0
	lsl	r2, r3, #1
	sub	r1, r1, r2
	add	r2, r7, #0
	add	r2, r2, #8
	mov	r6, #0
	ldrsh	r3, [r2, r6]
	asr	r2, r3, #8
	add	r6, r2, #0
	lsl	r3, r6, #16
	asr	r2, r3, #16
	asr	r3, r2, #31
	lsr	r6, r3, #31
	add	r3, r2, r6
	mov	r8, r3
	mov	r6, r8
	asr	r3, r6, #1
	add	r6, r3, #0
	lsl	r3, r6, #1
	sub	r2, r2, r3
	lsl	r3, r1, #16
	asr	r1, r3, #16
	lsl	r3, r2, #16
	asr	r2, r3, #16
	cmp	r1, r2
	beq	.L28	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #10
	add	r1, r2, #0
	b	.L29
.L62:
	.align	2
.L61:
	.word	Map_Alt
.L28:
	add	r2, r5, #0
	sub	r2, r2, #10
	add	r1, r2, #0
.L29:
	b	.L25
.L24:
	mov	r1, #160
.L25:
	ldrb	r2, [r0]
	mov	r3, #0
	and	r2, r2, r3
	add	r3, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #4
	add	r2, r7, #2
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	sub	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L30:
	add	r1, r7, #0
	add	r1, r1, #22
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #0
	add	r1, r1, #22
	ldrh	r2, [r1]
	sub	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	lsl	r1, r2, #16
	asr	r0, r1, #16
	mov	r1, #1
	cmn	r0, r1
	bne	.L33	@cond_branch
	b	.L31
.L33:
	ldr	r0, [r7, #28]
	ldr	r1, .L63
	ldrb	r2, [r1]
	strb	r2, [r0]
	ldr	r0, [r7, #28]
	add	r1, r0, #1
	str	r1, [r7, #28]
.L32:
	b	.L30
.L64:
	.align	2
.L63:
	.word	Col
.L31:
	add	r0, r7, #2
	add	r1, r7, #4
	ldrh	r2, [r1]
	strh	r2, [r0]
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #105
	ble	.L20	@cond_branch
	b	.L16
.L34:
.L23:
.L20:
	add	r1, r7, #0
	add	r1, r1, #16
	add	r0, r7, #0
	add	r0, r0, #16
	add	r1, r7, #0
	add	r1, r1, #16
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L18
.L19:
.L16:
	add	r0, r7, #0
	add	r1, r7, #0
	ldrb	r2, [r1]
	add	r1, r2, #2
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L14
.L15:
	ldr	r0, .L65
	ldr	r2, .L65+4
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldr	r1, [r0]
	str	r1, [r7, #28]
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r1, #80
	strh	r1, [r0]
.L35:
	add	r1, r7, #0
	add	r1, r1, #22
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #0
	add	r1, r1, #22
	ldrh	r2, [r1]
	sub	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	lsl	r1, r2, #16
	asr	r0, r1, #16
	mov	r1, #1
	cmn	r0, r1
	bne	.L38	@cond_branch
	b	.L36
.L66:
	.align	2
.L65:
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.L38:
	ldr	r0, .L67
	str	r0, [r7, #36]
	ldr	r0, [r7, #36]
	ldr	r1, [r7, #28]
	str	r1, [r0]
	ldr	r1, [r7, #36]
	add	r0, r1, #4
	ldr	r1, [r7, #28]
	add	r2, r1, #0
	add	r2, r2, #240
	str	r2, [r0]
	ldr	r1, [r7, #36]
	add	r0, r1, #0
	add	r0, r0, #8
	ldr	r1, .L67+4
	str	r1, [r0]
	ldr	r0, [r7, #28]
	mov	r3, #240
	lsl	r3, r3, #1
	add	r1, r0, r3
	str	r1, [r7, #28]
.L37:
	b	.L35
.L68:
	.align	2
.L67:
	.word	67109076
	.word	-2147483595
.L36:
	ldr	r0, .L69
	ldrb	r1, [r0]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r1, #0
	strh	r1, [r0]
.L39:
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r6, #0
	ldrsh	r1, [r0, r6]
	cmp	r1, #99
	ble	.L42	@cond_branch
	b	.L40
.L70:
	.align	2
.L69:
	.word	Col
.L42:
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r1, #0
	ldrsh	r2, [r0, r1]
	ldr	r3, .L71
	mov	r0, #90
	mov	r1, #100
	bl	Graphics_DrawHorizontal
.L41:
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #0
	add	r1, r1, #22
	ldrh	r2, [r1]
	add	r1, r2, #5
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L39
.L72:
	.align	2
.L71:
	.word	Col
.L40:
	ldr	r0, .L73
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #0
	ble	.L43	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r1, #0
	strh	r1, [r0]
.L44:
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r3, #0
	ldrsh	r6, [r0, r3]
	ldr	r0, .L73
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	mov	r0, #60
	bl	__divsi3
	cmp	r6, r0
	blt	.L47	@cond_branch
	b	.L43
.L74:
	.align	2
.L73:
	.word	fps
.L47:
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r3, #0
	ldrsh	r2, [r0, r3]
	ldr	r3, .L75
	mov	r0, #92
	mov	r1, #98
	bl	Graphics_DrawHorizontal
.L46:
	add	r1, r7, #0
	add	r1, r1, #22
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #0
	add	r1, r1, #22
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L44
.L76:
	.align	2
.L75:
	.word	Col
.L45:
.L43:
	ldr	r0, .L77
	mov	r1, #0
	ldrsb	r1, [r0, r1]
	cmp	r1, #0
	beq	.L48	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r1, #150
	strh	r1, [r0]
.L49:
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r6, #0
	ldrsh	r1, [r0, r6]
	cmp	r1, #159
	ble	.L52	@cond_branch
	b	.L48
.L78:
	.align	2
.L77:
	.word	method
.L52:
	add	r0, r7, #0
	add	r0, r0, #22
	mov	r1, #0
	ldrsh	r2, [r0, r1]
	ldr	r3, .L79
	mov	r0, #92
	mov	r1, #98
	bl	Graphics_DrawHorizontal
.L51:
	add	r1, r7, #0
	add	r1, r1, #22
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #0
	add	r1, r1, #22
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L49
.L80:
	.align	2
.L79:
	.word	Col
.L50:
.L48:
	bl	Graphics_SwapScreens
.L13:
	add	sp, sp, #48
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.Lfe4:
	.size	 Dakar_Render,.Lfe4-Dakar_Render
	.align	2
	.globl	Dakar_SetUpRender
	.type	 Dakar_SetUpRender,function
	.thumb_func
Dakar_SetUpRender:
	push	{r7, lr}
	mov	r7, sp
.L81:
	pop	{r7, pc}
.Lfe5:
	.size	 Dakar_SetUpRender,.Lfe5-Dakar_SetUpRender
	.align	2
	.globl	Dakar_AddTriangle
	.type	 Dakar_AddTriangle,function
	.thumb_func
Dakar_AddTriangle:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-12
	mov	r7, sp
	add	r6, r0, #0
	add	r5, r1, #0
	add	r4, r2, #0
	add	r2, r3, #0
	ldr	r1, [r7, #32]
	ldr	r0, [r7, #36]
	add	r3, r7, #0
	strh	r6, [r3]
	add	r3, r7, #2
	strh	r5, [r3]
	add	r3, r7, #4
	strh	r4, [r3]
	add	r3, r7, #6
	strh	r2, [r3]
	add	r2, r7, #0
	add	r2, r2, #8
	strh	r1, [r2]
	add	r1, r7, #0
	add	r1, r1, #10
	strh	r0, [r1]
.L82:
	add	sp, sp, #12
	pop	{r4, r5, r6, r7, pc}
.Lfe6:
	.size	 Dakar_AddTriangle,.Lfe6-Dakar_AddTriangle
	.section .rodata
	.align	2
.LC13:
	.word	Graphics_Buffer
.text
	.align	2
	.globl	Dakar_GameDrawString
	.type	 Dakar_GameDrawString,function
	.thumb_func
Dakar_GameDrawString:
	push	{r4, r7, lr}
	add	sp, sp, #-20
	mov	r7, sp
	add	r4, r0, #0
	str	r2, [r7, #4]
	add	r0, r3, #0
	add	r2, r7, #0
	add	r3, r4, #0
	strh	r3, [r2]
	add	r2, r7, #2
	strh	r1, [r2]
	add	r1, r7, #0
	add	r1, r1, #8
	strb	r0, [r1]
	ldr	r0, [r7, #4]
	str	r0, [r7, #12]
	add	r0, r7, #0
	add	r0, r0, #17
	mov	r1, #0
	strb	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #8
	ldrb	r1, [r0]
	mov	r2, #1
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	beq	.L84	@cond_branch
	add	r4, r7, #0
	add	r4, r4, #17
	ldr	r1, [r7, #4]
	add	r0, r1, #0
	bl	strlen
	add	r1, r0, #0
	neg	r0, r1
	add	r1, r0, #0
	strb	r1, [r4]
.L84:
	add	r0, r7, #0
	add	r0, r0, #8
	ldrb	r1, [r0]
	mov	r2, #2
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r4, r7, #0
	add	r4, r4, #17
	ldr	r1, [r7, #4]
	add	r0, r1, #0
	bl	strlen
	lsr	r1, r0, #1
	add	r0, r1, #0
	neg	r1, r0
	add	r0, r1, #0
	strb	r0, [r4]
.L85:
.L86:
	ldr	r0, [r7, #12]
	mov	r1, #0
	ldrsb	r1, [r0, r1]
	cmp	r1, #0
	bne	.L88	@cond_branch
	b	.L87
.L88:
	add	r0, r7, #0
	add	r0, r0, #16
	ldr	r1, [r7, #12]
	ldrb	r2, [r1]
	strb	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r1, #0
	ldrsb	r1, [r0, r1]
	cmp	r1, #64
	bgt	.L89	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r1, #0
	ldrsb	r1, [r0, r1]
	cmp	r1, #90
	ble	.L89	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r1, #0
	strb	r1, [r0]
.L89:
	ldr	r0, .L90
	add	r2, r7, #2
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r7, #0
	mov	r4, #0
	ldrsh	r2, [r3, r4]
	add	r4, r7, #0
	add	r4, r4, #17
	mov	r3, #0
	ldrsb	r3, [r4, r3]
	lsl	r4, r1, #5
	add	r1, r4, r2
	add	r2, r1, r3
	add	r1, r2, #0
	lsl	r2, r1, #1
	ldr	r1, [r0, #12]
	add	r0, r2, r1
	add	r1, r7, #0
	add	r1, r1, #16
	mov	r2, #0
	ldrsb	r2, [r1, r2]
	add	r1, r2, #0
	add	r2, r1, #0
	sub	r2, r2, #64
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r0, [r7, #12]
	add	r1, r0, #1
	str	r1, [r7, #12]
	add	r1, r7, #0
	add	r0, r7, #0
	add	r1, r7, #0
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L86
.L91:
	.align	2
.L90:
	.word	Graphics_Buffer
.L87:
.L83:
	add	sp, sp, #20
	pop	{r4, r7, pc}
.Lfe7:
	.size	 Dakar_GameDrawString,.Lfe7-Dakar_GameDrawString
	.comm	Debug_Buffer, 256	@ 256
	.comm	CollisionState, 4	@ 4
	.comm	TheCollisions, 124	@ 124
	.comm	viewableTrackBasePos, 12	@ 12
	.comm	Dakar_MenuCurrPos, 4	@ 2
	.comm	Dakar_MenuPrevPos, 4	@ 2
	.comm	Dakar_MenuEffect, 16	@ 16
	.comm	Dakar_ContinueRace, 4	@ 1
	.comm	playersCar, 544	@ 544
	.comm	Dakar_ViewDirection, 8	@ 8
	.comm	Dakar_ViewPosition, 8	@ 8
	.comm	track, 3600	@ 3600
	.comm	SourceConfigIndex, 4	@ 2
	.comm	TargetConfigIndex, 4	@ 2
	.comm	Dakar_StateTable, 256	@ 256
	.comm	Dakar_State, 4	@ 4
	.comm	Interrupts_Check, 4	@ 2
	.comm	InterruptMainBuffer, 1024	@ 1024
	.comm	Graphics_DisplayMode, 4	@ 1
	.comm	Graphics_ActiveScreen, 4	@ 1
	.comm	Graphics_Buffer, 48	@ 48
	.comm	Graphics_TriPointArray, 6000	@ 6000
	.comm	Graphics_TriColourArray, 2000	@ 2000
	.comm	Graphics_TriCount, 4	@ 1
	.comm	Graphics_DrawTriBuffer, 8192	@ 8192
	.comm	Graphics_DrawTriCode, 4	@ 4
	.comm	Controls_CurrentButtonState, 4	@ 2
	.comm	Controls_PreviousButtonState, 4	@ 2
	.comm	line, 4	@ 2
	.comm	liner, 4	@ 2
	.comm	gg, 4	@ 2
	.comm	fps, 4	@ 2
	.comm	CamScale, 320	@ 320
