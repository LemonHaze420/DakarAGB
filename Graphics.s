@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2
.LC2:
	.ascii	"Graphics.c\000"
	.align	2
.LC4:
	.ascii	"Attempt to set an unsupported graphics mode.\000"
	.align	2
.LC0:
	.word	Graphics_DisplayMode
	.align	2
.LC1:
	.word	Col
	.align	2
.LC3:
	.word	.LC2
	.align	2
.LC5:
	.word	.LC4
	.align	2
.LC6:
	.word	.L23
.text
	.align	2
	.globl	Graphics_Init
	.type	 Graphics_Init,function
	.thumb_func
Graphics_Init:
	push	{r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r1, r7, #0
	strb	r0, [r1]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, .L24
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, .L24+4
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, .L24+8
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, .L24+12
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, .L24+16
	add	r1, r7, #0
	ldrb	r2, [r1]
	strb	r2, [r0]
	add	r1, r7, #0
	ldrb	r0, [r1]
	cmp	r0, #5
	bls	.LCB42
	b	.L22	@long jump
.LCB42:
	lsl	r1, r0, #2
	ldr	r2, .L24+20
	add	r0, r1, r2
	ldr	r1, [r0]
	mov	pc, r1
.L25:
	.align	2
.L24:
	.word	67108872
	.word	67108874
	.word	67108876
	.word	67108878
	.word	Graphics_DisplayMode
	.word	.L23
	.align	2
	.align	2
.L23:
	.word	.L4
	.word	.L9
	.word	.L14
	.word	.L21
	.word	.L21
	.word	.L21
.L4:
	add	r0, r7, #0
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	Graphics_SetGraphicsMode
	add	r0, r7, #2
	mov	r1, #4
	strh	r1, [r0]
.L5:
	add	r1, r7, #2
	add	r0, r7, #2
	add	r1, r7, #2
	ldrh	r2, [r1]
	sub	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	lsl	r1, r2, #16
	asr	r0, r1, #16
	mov	r1, #1
	cmn	r0, r1
	bne	.L8	@cond_branch
	b	.L6
.L8:
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	mov	r1, #0
	bl	Graphics_SetBackgroundMosiac
	add	r0, r7, #2
	mov	r3, #0
	ldrsh	r1, [r0, r3]
	add	r0, r1, #0
	mov	r1, #2
	bl	Graphics_SetBackgroundPriority
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	mov	r1, #0
	bl	Graphics_SetBackgroundScreenSize
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r0, [r1, r3]
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	bl	Graphics_SetBackgroundScreenBaseBlock
.L7:
	b	.L5
.L6:
	b	.L3
.L9:
	add	r0, r7, #0
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	Graphics_SetGraphicsMode
	add	r0, r7, #2
	mov	r1, #3
	strh	r1, [r0]
.L10:
	add	r1, r7, #2
	add	r0, r7, #2
	add	r1, r7, #2
	ldrh	r2, [r1]
	sub	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	lsl	r1, r2, #16
	asr	r0, r1, #16
	mov	r1, #1
	cmn	r0, r1
	bne	.L13	@cond_branch
	b	.L11
.L13:
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	mov	r1, #0
	bl	Graphics_SetBackgroundMosiac
	add	r0, r7, #2
	mov	r3, #0
	ldrsh	r1, [r0, r3]
	add	r0, r1, #0
	mov	r1, #2
	bl	Graphics_SetBackgroundPriority
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	mov	r1, #0
	bl	Graphics_SetBackgroundScreenSize
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r0, [r1, r3]
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	bl	Graphics_SetBackgroundScreenBaseBlock
.L12:
	b	.L10
.L11:
	b	.L3
.L14:
	add	r0, r7, #0
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	Graphics_SetGraphicsMode
	add	r0, r7, #2
	mov	r1, #4
	strh	r1, [r0]
.L15:
	add	r1, r7, #2
	add	r0, r7, #2
	add	r1, r7, #2
	ldrh	r2, [r1]
	sub	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	lsl	r1, r2, #16
	asr	r0, r1, #16
	mov	r1, #1
	cmn	r0, r1
	bne	.L18	@cond_branch
	b	.L16
.L18:
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	mov	r1, #0
	bl	Graphics_SetBackgroundMosiac
	add	r0, r7, #2
	mov	r3, #0
	ldrsh	r1, [r0, r3]
	add	r0, r1, #0
	mov	r1, #2
	bl	Graphics_SetBackgroundPriority
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	mov	r1, #0
	bl	Graphics_SetBackgroundScreenSize
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r0, [r1, r3]
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	bl	Graphics_SetBackgroundScreenBaseBlock
.L17:
	b	.L15
.L16:
	b	.L3
.L19:
.L20:
.L21:
	add	r0, r7, #0
	ldrb	r1, [r0]
	add	r0, r1, #0
	bl	Graphics_SetGraphicsMode
	mov	r0, #2
	mov	r1, #0
	bl	Graphics_SetBackgroundMosiac
	ldr	r0, .L26
	ldrb	r1, [r0]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r0, .L26
	ldr	r1, [r0]
	add	r0, r1, #0
	bl	Graphics_ClearScreen
	b	.L3
.L27:
	.align	2
.L26:
	.word	Col
.L22:
	ldr	r0, .L28
	ldr	r2, .L28+4
	mov	r1, #91
	bl	Debug_NoSuchChoice
	b	.L3
.L29:
	.align	2
.L28:
	.word	.LC2
	.word	.LC4
.L3:
.L2:
	add	sp, sp, #4
	pop	{r7, pc}
.Lfe1:
	.size	 Graphics_Init,.Lfe1-Graphics_Init
	.section .rodata
	.align	2
.LC7:
	.word	Graphics_Buffer
	.align	2
.LC8:
	.word	Graphics_ActiveScreen
	.align	2
.LC9:
	.word	.LC2
	.align	2
.LC10:
	.word	.LC4
	.align	2
.LC11:
	.word	.L39
	.align	2
.LC12:
	.word	Graphics_DisplayMode
.text
	.align	2
	.globl	Graphics_SetGraphicsMode
	.type	 Graphics_SetGraphicsMode,function
	.thumb_func
Graphics_SetGraphicsMode:
	push	{r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r1, r7, #0
	strb	r0, [r1]
	add	r1, r7, #0
	ldrb	r0, [r1]
	cmp	r0, #5
	bls	.LCB307
	b	.L38	@long jump
.LCB307:
	lsl	r1, r0, #2
	ldr	r2, .L40
	add	r0, r1, r2
	ldr	r1, [r0]
	mov	pc, r1
.L41:
	.align	2
.L40:
	.word	.L39
	.align	2
	.align	2
.L39:
	.word	.L32
	.word	.L33
	.word	.L34
	.word	.L35
	.word	.L36
	.word	.L37
.L32:
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	ldr	r3, .L42
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #16
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #16
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #2
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #3
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #4
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #5
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L31
.L43:
	.align	2
.L42:
	.word	65528
.L33:
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	ldr	r3, .L44
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #16
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #16
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #2
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #3
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #4
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #128
	lsl	r3, r3, #4
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #5
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L31
.L45:
	.align	2
.L44:
	.word	65528
.L34:
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	ldr	r3, .L46
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #2
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #16
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #16
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #128
	lsl	r3, r3, #1
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #2
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #128
	lsl	r3, r3, #2
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #3
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #4
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #5
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L31
.L47:
	.align	2
.L46:
	.word	65528
.L35:
	b	.L31
.L36:
	ldr	r0, .L48
	mov	r1, #192
	lsl	r1, r1, #19
	str	r1, [r0]
	ldr	r0, .L48
	ldrb	r1, [r0, #4]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #4]
	ldr	r0, .L48
	ldrb	r1, [r0, #5]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #240
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #5]
	ldr	r0, .L48
	ldrb	r1, [r0, #6]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #160
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #6]
	ldr	r0, .L48
	ldrh	r1, [r0, #8]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #150
	lsl	r3, r3, #8
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0, #8]
	ldr	r0, .L48
	ldrb	r1, [r0, #10]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #8
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #10]
	ldr	r0, .L48
	ldr	r1, .L48+4
	str	r1, [r0, #12]
	ldr	r0, .L48
	ldrb	r1, [r0, #16]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #16]
	ldr	r0, .L48
	ldrb	r1, [r0, #17]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #240
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #17]
	ldr	r0, .L48
	ldrb	r1, [r0, #18]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #160
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #18]
	ldr	r0, .L48
	ldrh	r1, [r0, #20]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #150
	lsl	r3, r3, #8
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0, #20]
	ldr	r0, .L48
	ldrb	r1, [r0, #22]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #8
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #22]
	ldr	r0, .L48
	mov	r1, #0
	str	r1, [r0, #24]
	ldr	r0, .L48
	ldrb	r1, [r0, #28]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0, #28]
	ldr	r0, .L48
	mov	r1, #0
	str	r1, [r0, #36]
	ldr	r0, .L48
	add	r1, r0, #0
	add	r0, r0, #40
	ldrb	r1, [r0]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r0, .L48+8
	mov	r1, #1
	strb	r1, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	ldr	r3, .L48+12
	add	r1, r2, #0
	and	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #4
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #16
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #16
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #128
	lsl	r3, r3, #1
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #2
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #128
	lsl	r3, r3, #2
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #3
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #4
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	mov	r3, #128
	lsl	r3, r3, #4
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #128
	lsl	r3, r3, #5
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L31
.L49:
	.align	2
.L48:
	.word	Graphics_Buffer
	.word	100704256
	.word	Graphics_ActiveScreen
	.word	65528
.L37:
	b	.L31
.L38:
	ldr	r0, .L50
	ldr	r2, .L50+4
	mov	r1, #202
	bl	Debug_NoSuchChoice
	b	.L31
.L51:
	.align	2
.L50:
	.word	.LC2
	.word	.LC4
.L31:
	ldr	r0, .L52
	add	r1, r7, #0
	ldrb	r2, [r1]
	strb	r2, [r0]
.L30:
	add	sp, sp, #4
	pop	{r7, pc}
.L53:
	.align	2
.L52:
	.word	Graphics_DisplayMode
.Lfe2:
	.size	 Graphics_SetGraphicsMode,.Lfe2-Graphics_SetGraphicsMode
	.align	2
	.globl	Graphics_SetBackground
	.type	 Graphics_SetBackground,function
	.thumb_func
Graphics_SetBackground:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #0
	beq	.L55	@cond_branch
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	add	r2, r2, #8
	mov	r3, #1
	add	r4, r3, #0
	lsl	r4, r4, r2
	add	r2, r4, #0
	ldrh	r1, [r1]
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L56
.L55:
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	add	r2, r2, #8
	mov	r3, #1
	add	r4, r3, #0
	lsl	r4, r4, r2
	add	r2, r4, #0
	ldrh	r1, [r1]
	orr	r1, r1, r2
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	add	r2, r2, #8
	mov	r3, #1
	add	r4, r3, #0
	lsl	r4, r4, r2
	add	r2, r4, #0
	eor	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L56:
.L54:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.Lfe3:
	.size	 Graphics_SetBackground,.Lfe3-Graphics_SetBackground
	.section .rodata
	.align	2
.LC13:
	.word	Graphics_DisplayMode
	.align	2
.LC14:
	.word	BGCntRegs
.text
	.align	2
	.globl	Graphics_SetBackgroundPriority
	.type	 Graphics_SetBackgroundPriority,function
	.thumb_func
Graphics_SetBackgroundPriority:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L59
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L58	@cond_branch
	b	.L57
.L60:
	.align	2
.L59:
	.word	Graphics_DisplayMode
.L58:
	ldr	r0, .L61
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, .L61
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	lsl	r3, r2, #2
	add	r1, r1, r3
	ldr	r2, [r1]
	ldrh	r1, [r2]
	ldr	r2, .L61+4
	and	r1, r1, r2
	add	r2, r7, #2
	ldrh	r3, [r2]
	mov	r4, #3
	add	r2, r3, #0
	and	r2, r2, r4
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L57:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.L62:
	.align	2
.L61:
	.word	BGCntRegs
	.word	65532
.Lfe4:
	.size	 Graphics_SetBackgroundPriority,.Lfe4-Graphics_SetBackgroundPriority
	.section .rodata
	.align	2
.LC15:
	.word	Graphics_DisplayMode
	.align	2
.LC16:
	.word	BGCntRegs
.text
	.align	2
	.globl	Graphics_SetBackgroundCharBaseBlock
	.type	 Graphics_SetBackgroundCharBaseBlock,function
	.thumb_func
Graphics_SetBackgroundCharBaseBlock:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L65
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L64	@cond_branch
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #2
	beq	.L64	@cond_branch
	b	.L63
.L66:
	.align	2
.L65:
	.word	Graphics_DisplayMode
.L64:
	ldr	r0, .L67
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, .L67
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	lsl	r3, r2, #2
	add	r1, r1, r3
	ldr	r2, [r1]
	ldrh	r1, [r2]
	ldr	r2, .L67+4
	and	r1, r1, r2
	add	r2, r7, #2
	ldrh	r3, [r2]
	mov	r4, #3
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #2
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L63:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.L68:
	.align	2
.L67:
	.word	BGCntRegs
	.word	65523
.Lfe5:
	.size	 Graphics_SetBackgroundCharBaseBlock,.Lfe5-Graphics_SetBackgroundCharBaseBlock
	.section .rodata
	.align	2
.LC17:
	.word	Graphics_DisplayMode
	.align	2
.LC18:
	.word	BGCntRegs
.text
	.align	2
	.globl	Graphics_SetBackgroundMosiac
	.type	 Graphics_SetBackgroundMosiac,function
	.thumb_func
Graphics_SetBackgroundMosiac:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L71
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L70	@cond_branch
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #2
	beq	.L70	@cond_branch
	b	.L69
.L72:
	.align	2
.L71:
	.word	Graphics_DisplayMode
.L70:
	ldr	r0, .L73
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, .L73
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	lsl	r3, r2, #2
	add	r1, r1, r3
	ldr	r2, [r1]
	ldrh	r1, [r2]
	ldr	r2, .L73+4
	and	r1, r1, r2
	add	r2, r7, #2
	ldrh	r3, [r2]
	mov	r4, #1
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #6
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L69:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.L74:
	.align	2
.L73:
	.word	BGCntRegs
	.word	65471
.Lfe6:
	.size	 Graphics_SetBackgroundMosiac,.Lfe6-Graphics_SetBackgroundMosiac
	.section .rodata
	.align	2
.LC19:
	.word	Graphics_DisplayMode
	.align	2
.LC20:
	.word	BGCntRegs
.text
	.align	2
	.globl	Graphics_SetBackgroundColourMode
	.type	 Graphics_SetBackgroundColourMode,function
	.thumb_func
Graphics_SetBackgroundColourMode:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L77
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L76	@cond_branch
	b	.L75
.L78:
	.align	2
.L77:
	.word	Graphics_DisplayMode
.L76:
	ldr	r0, .L79
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, .L79
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	lsl	r3, r2, #2
	add	r1, r1, r3
	ldr	r2, [r1]
	ldrh	r1, [r2]
	ldr	r2, .L79+4
	and	r1, r1, r2
	add	r2, r7, #2
	ldrh	r3, [r2]
	mov	r4, #1
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #7
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L75:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.L80:
	.align	2
.L79:
	.word	BGCntRegs
	.word	65407
.Lfe7:
	.size	 Graphics_SetBackgroundColourMode,.Lfe7-Graphics_SetBackgroundColourMode
	.section .rodata
	.align	2
.LC21:
	.word	Graphics_DisplayMode
	.align	2
.LC22:
	.word	Graphics_Buffer
	.align	2
.LC23:
	.word	BGCntRegs
.text
	.align	2
	.globl	Graphics_SetBackgroundScreenBaseBlock
	.type	 Graphics_SetBackgroundScreenBaseBlock,function
	.thumb_func
Graphics_SetBackgroundScreenBaseBlock:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L90
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L82	@cond_branch
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #2
	beq	.L82	@cond_branch
	ldr	r0, .L90+4
	add	r2, r7, #0
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldrb	r1, [r0, #4]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0, #4]
	ldr	r0, .L90+4
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r1, [r2, r4]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	mov	r1, #0
	str	r1, [r0]
	b	.L81
.L91:
	.align	2
.L90:
	.word	Graphics_DisplayMode
	.word	Graphics_Buffer
.L82:
	ldr	r0, .L92
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, .L92
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	lsl	r3, r2, #2
	add	r1, r1, r3
	ldr	r2, [r1]
	ldrh	r1, [r2]
	ldr	r2, .L92+4
	and	r1, r1, r2
	add	r2, r7, #2
	ldrh	r3, [r2]
	mov	r4, #31
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #8
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, .L92+8
	add	r2, r7, #0
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldrb	r1, [r0, #4]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	mov	r3, #1
	add	r1, r2, #0
	orr	r1, r1, r3
	add	r2, r1, #0
	strb	r2, [r0, #4]
	ldr	r0, .L92+8
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r1, [r2, r4]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #11
	mov	r4, #192
	lsl	r4, r4, #19
	add	r1, r2, r4
	str	r1, [r0]
	ldr	r1, .L92+12
	ldrb	r0, [r1]
	cmp	r0, #1
	beq	.L84	@cond_branch
	cmp	r0, #2
	beq	.L86	@cond_branch
	b	.L88
.L93:
	.align	2
.L92:
	.word	BGCntRegs
	.word	57599
	.word	Graphics_Buffer
	.word	Graphics_DisplayMode
.L84:
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #3
	bne	.L85	@cond_branch
	ldr	r0, .L94
	add	r2, r7, #0
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldrb	r1, [r0, #4]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0, #4]
	ldr	r0, .L94
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r1, [r2, r4]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	mov	r1, #0
	str	r1, [r0]
.L85:
	b	.L83
.L95:
	.align	2
.L94:
	.word	Graphics_Buffer
.L86:
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #1
	bgt	.L87	@cond_branch
	ldr	r0, .L96
	add	r2, r7, #0
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldrb	r1, [r0, #4]
	mov	r2, #0
	and	r1, r1, r2
	add	r2, r1, #0
	strb	r2, [r0, #4]
	ldr	r0, .L96
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r1, [r2, r4]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	mov	r1, #0
	str	r1, [r0]
.L87:
	b	.L83
.L97:
	.align	2
.L96:
	.word	Graphics_Buffer
.L88:
	b	.L83
.L83:
.L81:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.Lfe8:
	.size	 Graphics_SetBackgroundScreenBaseBlock,.Lfe8-Graphics_SetBackgroundScreenBaseBlock
	.section .rodata
	.align	2
.LC24:
	.word	BGCntRegs
.text
	.align	2
	.globl	Graphics_SetBackgroundTransparency
	.type	 Graphics_SetBackgroundTransparency,function
	.thumb_func
Graphics_SetBackgroundTransparency:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L99
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, .L99
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	lsl	r3, r2, #2
	add	r1, r1, r3
	ldr	r2, [r1]
	ldrh	r1, [r2]
	ldr	r2, .L99+4
	and	r1, r1, r2
	add	r2, r7, #2
	ldrh	r3, [r2]
	mov	r4, #1
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #13
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L98:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.L100:
	.align	2
.L99:
	.word	BGCntRegs
	.word	57343
.Lfe9:
	.size	 Graphics_SetBackgroundTransparency,.Lfe9-Graphics_SetBackgroundTransparency
	.section .rodata
	.align	2
.LC25:
	.word	Graphics_DisplayMode
	.align	2
.LC26:
	.word	BGCntRegs
.text
	.align	2
	.globl	Graphics_SetBackgroundScreenSize
	.type	 Graphics_SetBackgroundScreenSize,function
	.thumb_func
Graphics_SetBackgroundScreenSize:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r2, r0, #0
	add	r0, r1, #0
	add	r1, r7, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L103
	ldrb	r1, [r0]
	cmp	r1, #2
	bls	.L102	@cond_branch
	b	.L101
.L104:
	.align	2
.L103:
	.word	Graphics_DisplayMode
.L102:
	ldr	r0, .L105
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, .L105
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r2, r3, #0
	lsl	r3, r2, #2
	add	r1, r1, r3
	ldr	r2, [r1]
	ldrh	r1, [r2]
	lsl	r2, r1, #18
	lsr	r1, r2, #18
	add	r2, r7, #2
	ldrh	r3, [r2]
	mov	r4, #3
	add	r2, r3, #0
	and	r2, r2, r4
	add	r3, r2, #0
	lsl	r2, r3, #14
	orr	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
.L101:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.L106:
	.align	2
.L105:
	.word	BGCntRegs
.Lfe10:
	.size	 Graphics_SetBackgroundScreenSize,.Lfe10-Graphics_SetBackgroundScreenSize
	.section .rodata
	.align	2
.LC27:
	.word	Graphics_DisplayMode
	.align	2
.LC28:
	.word	Graphics_ActiveScreen
.text
	.align	2
	.globl	Graphics_SwapScreens
	.type	 Graphics_SwapScreens,function
	.thumb_func
Graphics_SwapScreens:
	push	{r7, lr}
	mov	r7, sp
	ldr	r0, .L110
	ldrb	r1, [r0]
	cmp	r1, #4
	beq	.L109	@cond_branch
	ldr	r0, .L110
	ldrb	r1, [r0]
	cmp	r1, #5
	beq	.L109	@cond_branch
	b	.L108
.L111:
	.align	2
.L110:
	.word	Graphics_DisplayMode
.L109:
	mov	r0, #128
	lsl	r0, r0, #19
	mov	r1, #128
	lsl	r1, r1, #19
	ldrh	r2, [r1]
	mov	r3, #16
	add	r1, r2, #0
	eor	r1, r1, r3
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, .L112
	ldr	r1, .L112
	ldrb	r2, [r1]
	mov	r3, #1
	sub	r1, r3, r2
	add	r2, r1, #0
	strb	r2, [r0]
.L108:
.L107:
	pop	{r7, pc}
.L113:
	.align	2
.L112:
	.word	Graphics_ActiveScreen
.Lfe11:
	.size	 Graphics_SwapScreens,.Lfe11-Graphics_SwapScreens
	.section .rodata
	.align	2
.LC29:
	.word	BGXOffsetRegs
	.align	2
.LC30:
	.word	BGYOffsetRegs
.text
	.align	2
	.globl	Graphics_OffsetBackground
	.type	 Graphics_OffsetBackground,function
	.thumb_func
Graphics_OffsetBackground:
	push	{r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	add	r3, r0, #0
	add	r0, r2, #0
	add	r2, r7, #0
	strh	r3, [r2]
	add	r2, r7, #2
	strh	r1, [r2]
	add	r1, r7, #4
	strh	r0, [r1]
	ldr	r0, .L115
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	add	r1, r7, #2
	ldrh	r2, [r1]
	lsl	r3, r2, #23
	lsr	r1, r3, #23
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, .L115+4
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	add	r1, r7, #4
	ldrh	r2, [r1]
	lsl	r3, r2, #23
	lsr	r1, r3, #23
	add	r2, r1, #0
	strh	r2, [r0]
.L114:
	add	sp, sp, #8
	pop	{r7, pc}
.L116:
	.align	2
.L115:
	.word	BGXOffsetRegs
	.word	BGYOffsetRegs
.Lfe12:
	.size	 Graphics_OffsetBackground,.Lfe12-Graphics_OffsetBackground
	.section .rodata
	.align	2
.LC31:
	.word	Graphics_DisplayMode
	.align	2
.LC32:
	.word	sin_cos_table
	.align	2
.LC33:
	.word	BGXHRegs
	.align	2
.LC34:
	.word	BGXLRegs
	.align	2
.LC35:
	.word	BGYHRegs
	.align	2
.LC36:
	.word	BGYLRegs
	.align	2
.LC37:
	.word	BGPARegs
	.align	2
.LC38:
	.word	BGPBRegs
	.align	2
.LC39:
	.word	BGPCRegs
	.align	2
.LC40:
	.word	BGPDRegs
.text
	.align	2
	.globl	Graphics_RotateScaleBackground
	.type	 Graphics_RotateScaleBackground,function
	.thumb_func
Graphics_RotateScaleBackground:
	push	{r4, r5, r7, lr}
	add	sp, sp, #-28
	mov	r7, sp
	add	r5, r0, #0
	add	r4, r1, #0
	add	r1, r2, #0
	add	r0, r3, #0
	add	r2, r7, #0
	add	r3, r5, #0
	strh	r3, [r2]
	add	r2, r7, #2
	add	r3, r4, #0
	strh	r3, [r2]
	add	r2, r7, #4
	strh	r1, [r2]
	add	r1, r7, #6
	strh	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #24
	mov	r1, #0
	strh	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #26
	mov	r1, #0
	strh	r1, [r0]
	ldr	r0, .L122
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L118	@cond_branch
	b	.L117
.L123:
	.align	2
.L122:
	.word	Graphics_DisplayMode
.L118:
	ldr	r0, .L124
	ldrb	r1, [r0]
	cmp	r1, #1
	beq	.L120	@cond_branch
	ldr	r0, .L124
	ldrb	r1, [r0]
	cmp	r1, #2
	bhi	.L120	@cond_branch
	b	.L119
.L125:
	.align	2
.L124:
	.word	Graphics_DisplayMode
.L120:
	add	r0, r7, #0
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	cmp	r1, #2
	beq	.L119	@cond_branch
	b	.L117
.L119:
	ldr	r0, .L126
	ldrb	r1, [r0]
	cmp	r1, #2
	bne	.L121	@cond_branch
	add	r0, r7, #0
	mov	r3, #0
	ldrsh	r1, [r0, r3]
	cmp	r1, #1
	bgt	.L121	@cond_branch
	b	.L117
.L127:
	.align	2
.L126:
	.word	Graphics_DisplayMode
.L121:
	ldr	r0, .L128
	add	r1, r7, #6
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	add	r1, r1, #64
	add	r2, r1, #0
	lsl	r1, r2, #1
	add	r0, r0, r1
	mov	r1, #0
	ldrsh	r4, [r0, r1]
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	bl	fix_inverse
	lsl	r2, r0, #16
	asr	r1, r2, #16
	add	r0, r4, #0
	bl	fix_mul
	add	r1, r7, #0
	add	r1, r1, #8
	strh	r0, [r1]
	ldr	r0, .L128
	add	r1, r7, #6
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #1
	add	r0, r0, r2
	mov	r1, #0
	ldrsh	r4, [r0, r1]
	add	r0, r7, #2
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	bl	fix_inverse
	lsl	r2, r0, #16
	asr	r1, r2, #16
	add	r0, r4, #0
	bl	fix_mul
	add	r1, r7, #0
	add	r1, r1, #10
	strh	r0, [r1]
	ldr	r0, .L128
	add	r1, r7, #6
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #1
	add	r0, r0, r2
	ldrh	r1, [r0]
	neg	r0, r1
	add	r1, r0, #0
	lsl	r0, r1, #16
	asr	r4, r0, #16
	add	r0, r7, #4
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	bl	fix_inverse
	lsl	r2, r0, #16
	asr	r1, r2, #16
	add	r0, r4, #0
	bl	fix_mul
	add	r1, r7, #0
	add	r1, r1, #12
	strh	r0, [r1]
	ldr	r0, .L128
	add	r1, r7, #6
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	add	r1, r1, #64
	add	r2, r1, #0
	lsl	r1, r2, #1
	add	r0, r0, r1
	mov	r1, #0
	ldrsh	r4, [r0, r1]
	add	r0, r7, #4
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	bl	fix_inverse
	lsl	r2, r0, #16
	asr	r1, r2, #16
	add	r0, r4, #0
	bl	fix_mul
	add	r1, r7, #0
	add	r1, r1, #14
	strh	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #24
	mov	r3, #0
	ldrsh	r1, [r0, r3]
	mov	r0, #120
	sub	r1, r0, r1
	lsl	r0, r1, #8
	add	r2, r7, #0
	add	r2, r2, #8
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #3
	sub	r0, r0, r1
	add	r2, r7, #0
	add	r2, r2, #10
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #2
	add	r2, r2, r1
	lsl	r1, r2, #4
	sub	r0, r0, r1
	str	r0, [r7, #16]
	add	r0, r7, #0
	add	r0, r0, #26
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	mov	r0, #80
	sub	r1, r0, r1
	lsl	r0, r1, #8
	add	r2, r7, #0
	add	r2, r2, #12
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #4
	sub	r2, r2, r1
	lsl	r1, r2, #3
	sub	r0, r0, r1
	add	r2, r7, #0
	add	r2, r2, #14
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r3, r1, #0
	lsl	r2, r3, #2
	add	r2, r2, r1
	lsl	r1, r2, #4
	sub	r0, r0, r1
	str	r0, [r7, #20]
	ldr	r0, .L128+4
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, [r7, #16]
	ldr	r2, .L128+8
	and	r1, r1, r2
	asr	r2, r1, #16
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r0, .L128+12
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r2, [r7, #16]
	add	r1, r2, #0
	mov	r2, #0
	bic	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, .L128+16
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r1, [r7, #20]
	ldr	r2, .L128+8
	and	r1, r1, r2
	asr	r2, r1, #16
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r0, .L128+20
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	ldr	r2, [r7, #20]
	add	r1, r2, #0
	mov	r2, #0
	bic	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, .L128+24
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #8
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, .L128+28
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #10
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, .L128+32
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #12
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, .L128+36
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	add	r1, r0, r2
	ldr	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #14
	ldrh	r2, [r1]
	strh	r2, [r0]
.L117:
	add	sp, sp, #28
	pop	{r4, r5, r7, pc}
.L129:
	.align	2
.L128:
	.word	sin_cos_table
	.word	BGXHRegs
	.word	268369920
	.word	BGXLRegs
	.word	BGYHRegs
	.word	BGYLRegs
	.word	BGPARegs
	.word	BGPBRegs
	.word	BGPCRegs
	.word	BGPDRegs
.Lfe13:
	.size	 Graphics_RotateScaleBackground,.Lfe13-Graphics_RotateScaleBackground
	.section .rodata
	.align	2
.LC41:
	.word	Graphics_Buffer
	.align	2
.LC42:
	.word	Graphics_ActiveScreen
.text
	.align	2
	.globl	Graphics_DrawPixelXY
	.type	 Graphics_DrawPixelXY,function
	.thumb_func
Graphics_DrawPixelXY:
	push	{r4, r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	add	r3, r0, #0
	add	r0, r1, #0
	str	r2, [r7, #4]
	add	r1, r7, #0
	add	r2, r3, #0
	strh	r2, [r1]
	add	r1, r7, #2
	strh	r0, [r1]
	ldr	r0, .L131
	ldr	r2, .L131+4
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldr	r1, .L131
	ldr	r3, .L131+4
	ldrb	r2, [r3]
	add	r4, r2, #0
	lsl	r3, r4, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	add	r3, r1, r2
	ldrb	r1, [r3, #5]
	add	r2, r7, #2
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	mul	r1, r1, r3
	add	r3, r7, #0
	mov	r4, #0
	ldrsh	r2, [r3, r4]
	ldr	r0, [r0]
	add	r1, r1, r0
	add	r0, r1, r2
	add	r1, r7, #4
	ldrb	r2, [r1]
	strb	r2, [r0]
.L130:
	add	sp, sp, #8
	pop	{r4, r7, pc}
.L132:
	.align	2
.L131:
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.Lfe14:
	.size	 Graphics_DrawPixelXY,.Lfe14-Graphics_DrawPixelXY
	.section .rodata
	.align	2
.LC43:
	.word	Graphics_Buffer
	.align	2
.LC44:
	.word	Graphics_ActiveScreen
.text
	.align	2
	.globl	Graphics_DrawLineXYXY
	.type	 Graphics_DrawLineXYXY,function
	.thumb_func
Graphics_DrawLineXYXY:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-36
	mov	r7, sp
	add	r5, r0, #0
	add	r4, r1, #0
	add	r1, r2, #0
	add	r0, r3, #0
	add	r2, r7, #0
	add	r3, r5, #0
	strh	r3, [r2]
	add	r2, r7, #2
	add	r3, r4, #0
	strh	r3, [r2]
	add	r2, r7, #4
	strh	r1, [r2]
	add	r1, r7, #6
	strh	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #8
	add	r1, r7, #4
	mov	r2, #0
	ldrsh	r4, [r1, r2]
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	sub	r4, r4, r2
	add	r2, r7, #4
	mov	r5, #0
	ldrsh	r1, [r2, r5]
	add	r2, r7, #0
	mov	r6, #0
	ldrsh	r3, [r2, r6]
	sub	r1, r1, r3
	cmp	r1, #0
	bge	.L136	@cond_branch
	add	r1, r7, #0
	mov	r2, #0
	ldrsh	r4, [r1, r2]
	add	r1, r7, #4
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	sub	r4, r4, r2
.L136:
	add	r2, r7, #6
	mov	r5, #0
	ldrsh	r1, [r2, r5]
	add	r2, r7, #2
	mov	r6, #0
	ldrsh	r3, [r2, r6]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L137	@cond_branch
	add	r2, r7, #6
	mov	r3, #0
	ldrsh	r1, [r2, r3]
	add	r2, r7, #2
	mov	r5, #0
	ldrsh	r3, [r2, r5]
	sub	r1, r1, r3
	cmp	r4, r1
	bgt	.L138	@cond_branch
	b	.L134
.L137:
	add	r2, r7, #2
	mov	r6, #0
	ldrsh	r1, [r2, r6]
	add	r2, r7, #6
	mov	r5, #0
	ldrsh	r3, [r2, r5]
	sub	r1, r1, r3
	cmp	r4, r1
	bgt	.L138	@cond_branch
	b	.L134
.L138:
	add	r2, r7, #4
	mov	r6, #0
	ldrsh	r1, [r2, r6]
	add	r2, r7, #0
	mov	r5, #0
	ldrsh	r3, [r2, r5]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L139	@cond_branch
	add	r1, r7, #4
	add	r2, r7, #0
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	sub	r3, r1, r2
	add	r1, r3, #0
	b	.L140
.L139:
	add	r2, r7, #0
	add	r3, r7, #4
	ldrh	r2, [r2]
	ldrh	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L140:
	b	.L135
.L134:
	add	r3, r7, #6
	mov	r6, #0
	ldrsh	r2, [r3, r6]
	add	r3, r7, #2
	mov	r6, #0
	ldrsh	r5, [r3, r6]
	sub	r2, r2, r5
	cmp	r2, #0
	blt	.L141	@cond_branch
	add	r2, r7, #6
	add	r3, r7, #2
	ldrh	r2, [r2]
	ldrh	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
	b	.L135
.L141:
	add	r2, r7, #2
	add	r3, r7, #6
	ldrh	r2, [r2]
	ldrh	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L142:
.L135:
	strh	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #10
	add	r1, r7, #4
	add	r2, r7, #0
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	sub	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #12
	add	r1, r7, #6
	add	r2, r7, #2
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	sub	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #10
	mov	r2, #0
	ldrsh	r1, [r0, r2]
	add	r0, r1, #0
	cmp	r0, #0
	bge	.L143	@cond_branch
	neg	r0, r0
.L143:
	lsl	r0, r0, #16
	add	r1, r7, #0
	add	r1, r1, #8
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	bl	__divsi3
	str	r0, [r7, #20]
	add	r0, r7, #0
	add	r0, r0, #12
	mov	r5, #0
	ldrsh	r1, [r0, r5]
	add	r0, r1, #0
	cmp	r0, #0
	bge	.L144	@cond_branch
	neg	r0, r0
.L144:
	lsl	r0, r0, #16
	add	r1, r7, #0
	add	r1, r1, #8
	mov	r6, #0
	ldrsh	r2, [r1, r6]
	add	r1, r2, #0
	bl	__divsi3
	str	r0, [r7, #24]
	mov	r0, #0
	str	r0, [r7, #28]
	mov	r0, #0
	str	r0, [r7, #32]
	add	r0, r7, #0
	add	r0, r0, #10
	add	r1, r7, #0
	ldrh	r2, [r1]
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #12
	add	r1, r7, #2
	ldrh	r2, [r1]
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #14
	mov	r1, #0
	strh	r1, [r0]
	add	r1, r7, #4
	mov	r2, #0
	ldrsh	r0, [r1, r2]
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	sub	r0, r0, r2
	cmp	r0, #0
	ble	.L145	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #14
	mov	r1, #1
	strh	r1, [r0]
	b	.L146
.L145:
	add	r1, r7, #4
	mov	r5, #0
	ldrsh	r0, [r1, r5]
	add	r1, r7, #0
	mov	r6, #0
	ldrsh	r2, [r1, r6]
	sub	r0, r0, r2
	cmp	r0, #0
	bge	.L146	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #14
	mov	r2, #1
	neg	r2, r2
	add	r1, r2, #0
	strh	r1, [r0]
.L147:
.L146:
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r1, #0
	strh	r1, [r0]
	add	r1, r7, #6
	mov	r3, #0
	ldrsh	r0, [r1, r3]
	add	r1, r7, #2
	mov	r5, #0
	ldrsh	r2, [r1, r5]
	sub	r0, r0, r2
	cmp	r0, #0
	ble	.L148	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r1, #1
	strh	r1, [r0]
	b	.L149
.L148:
	add	r1, r7, #6
	mov	r6, #0
	ldrsh	r0, [r1, r6]
	add	r1, r7, #2
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	sub	r0, r0, r2
	cmp	r0, #0
	bge	.L149	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #16
	mov	r5, #1
	neg	r5, r5
	add	r1, r5, #0
	strh	r1, [r0]
.L150:
.L149:
	ldr	r0, .L172
	ldr	r2, .L172+4
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldrb	r1, [r0, #10]
	mov	r2, #28
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	bne	.L151	@cond_branch
	b	.L133
.L173:
	.align	2
.L172:
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.L151:
	ldr	r0, .L174
	ldr	r2, .L174+4
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldrb	r1, [r0, #10]
	mov	r2, #8
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #24
	lsr	r0, r1, #24
	cmp	r0, #0
	bne	.LCB2625
	b	.L152	@long jump
.LCB2625:
.L153:
	add	r0, r7, #0
	add	r0, r0, #8
	mov	r6, #0
	ldrsh	r1, [r0, r6]
	cmp	r1, #0
	bgt	.L155	@cond_branch
	b	.L154
.L175:
	.align	2
.L174:
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.L155:
	ldr	r0, .L176
	ldr	r2, .L176+4
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldr	r1, .L176
	ldr	r3, .L176+4
	ldrb	r2, [r3]
	add	r5, r2, #0
	lsl	r3, r5, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	add	r3, r1, r2
	ldrb	r1, [r3, #5]
	add	r2, r7, #0
	add	r2, r2, #12
	mov	r5, #0
	ldrsh	r3, [r2, r5]
	mul	r1, r1, r3
	add	r3, r7, #0
	add	r3, r3, #10
	mov	r6, #0
	ldrsh	r2, [r3, r6]
	ldr	r0, [r0]
	add	r1, r1, r0
	add	r0, r1, r2
	add	r1, r7, #0
	add	r1, r1, #56
	ldrb	r2, [r1]
	strb	r2, [r0]
	ldr	r0, [r7, #28]
	ldr	r1, [r7, #20]
	add	r0, r0, r1
	str	r0, [r7, #28]
	ldr	r0, [r7, #32]
	ldr	r1, [r7, #24]
	add	r0, r0, r1
	str	r0, [r7, #32]
.L156:
	ldr	r1, [r7, #28]
	asr	r0, r1, #16
	cmp	r0, #0
	bne	.L158	@cond_branch
	b	.L157
.L177:
	.align	2
.L176:
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.L158:
	add	r0, r7, #0
	add	r0, r0, #10
	add	r1, r7, #0
	add	r1, r1, #10
	add	r2, r7, #0
	add	r2, r2, #14
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	add	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, [r7, #28]
	ldr	r2, .L178
	add	r1, r0, r2
	str	r1, [r7, #28]
	b	.L156
.L179:
	.align	2
.L178:
	.word	-65536
.L157:
.L159:
	ldr	r1, [r7, #32]
	asr	r0, r1, #16
	cmp	r0, #0
	bne	.L161	@cond_branch
	b	.L160
.L161:
	add	r0, r7, #0
	add	r0, r0, #12
	add	r1, r7, #0
	add	r1, r1, #12
	add	r2, r7, #0
	add	r2, r2, #16
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	add	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, [r7, #32]
	ldr	r3, .L180
	add	r1, r0, r3
	str	r1, [r7, #32]
	b	.L159
.L181:
	.align	2
.L180:
	.word	-65536
.L160:
	add	r1, r7, #0
	add	r1, r1, #8
	add	r0, r7, #0
	add	r0, r0, #8
	add	r1, r7, #0
	add	r1, r1, #8
	ldrh	r2, [r1]
	sub	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L153
.L154:
	b	.L162
.L152:
.L163:
	add	r0, r7, #0
	add	r0, r0, #8
	mov	r5, #0
	ldrsh	r1, [r0, r5]
	cmp	r1, #0
	bgt	.L165	@cond_branch
	b	.L162
.L165:
	ldr	r0, .L182
	ldr	r2, .L182+4
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldr	r1, .L182
	ldr	r3, .L182+4
	ldrb	r2, [r3]
	add	r5, r2, #0
	lsl	r3, r5, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	add	r3, r1, r2
	ldrb	r1, [r3, #5]
	add	r2, r7, #0
	add	r2, r2, #12
	mov	r6, #0
	ldrsh	r3, [r2, r6]
	mul	r1, r1, r3
	add	r3, r7, #0
	add	r3, r3, #10
	mov	r5, #0
	ldrsh	r2, [r3, r5]
	ldr	r0, [r0]
	add	r1, r1, r0
	add	r0, r1, r2
	add	r1, r7, #0
	add	r1, r1, #56
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #28]
	ldr	r1, [r7, #20]
	add	r0, r0, r1
	str	r0, [r7, #28]
	ldr	r0, [r7, #32]
	ldr	r1, [r7, #24]
	add	r0, r0, r1
	str	r0, [r7, #32]
.L166:
	ldr	r1, [r7, #28]
	asr	r0, r1, #16
	cmp	r0, #0
	bne	.L168	@cond_branch
	b	.L167
.L183:
	.align	2
.L182:
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.L168:
	add	r0, r7, #0
	add	r0, r0, #10
	add	r1, r7, #0
	add	r1, r1, #10
	add	r2, r7, #0
	add	r2, r2, #14
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	add	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	ldr	r0, [r7, #28]
	ldr	r6, .L184
	add	r1, r0, r6
	str	r1, [r7, #28]
	b	.L166
.L185:
	.align	2
.L184:
	.word	-65536
.L167:
.L169:
	ldr	r1, [r7, #32]
	asr	r0, r1, #16
	cmp	r0, #0
	bne	.L171	@cond_branch
	b	.L170
.L171:
	add	r0, r7, #0
	add	r0, r0, #12
	add	r1, r7, #0
	add	r1, r1, #16
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #32]
	ldr	r2, .L186
	add	r1, r0, r2
	str	r1, [r7, #32]
	b	.L169
.L187:
	.align	2
.L186:
	.word	-65536
.L170:
	add	r1, r7, #0
	add	r1, r1, #8
	add	r0, r7, #0
	add	r0, r0, #8
	add	r1, r7, #0
	add	r1, r1, #8
	ldrh	r2, [r1]
	sub	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
	b	.L163
.L164:
.L162:
.L133:
	add	sp, sp, #36
	pop	{r4, r5, r6, r7, pc}
.Lfe15:
	.size	 Graphics_DrawLineXYXY,.Lfe15-Graphics_DrawLineXYXY
	.section .rodata
	.align	2
.LC45:
	.word	Graphics_TriPointArray
	.align	2
.LC46:
	.word	Graphics_TriColourArray
	.align	2
.LC47:
	.word	Graphics_TriCount
.text
	.align	2
	.globl	Graphics_DrawTriangleArray
	.type	 Graphics_DrawTriangleArray,function
	.thumb_func
Graphics_DrawTriangleArray:
	push	{r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r0, r7, #0
	mov	r1, #0
	strh	r1, [r0]
	add	r1, r7, #0
	mov	r2, #0
	ldrsh	r0, [r1, r2]
	add	r2, r0, #0
	lsl	r1, r2, #1
	add	r1, r1, r0
	lsl	r0, r1, #2
	ldr	r1, .L189
	add	r0, r0, r1
	add	r1, r7, #0
	mov	r3, #0
	ldrsh	r2, [r1, r3]
	add	r1, r2, #0
	lsl	r2, r1, #2
	ldr	r3, .L189+4
	add	r1, r2, r3
	bl	Graphics_DrawFilledTriangle
	ldr	r0, .L189+8
	mov	r1, #0
	strb	r1, [r0]
.L188:
	add	sp, sp, #4
	pop	{r7, pc}
.L190:
	.align	2
.L189:
	.word	Graphics_TriPointArray
	.word	Graphics_TriColourArray
	.word	Graphics_TriCount
.Lfe16:
	.size	 Graphics_DrawTriangleArray,.Lfe16-Graphics_DrawTriangleArray
	.section .rodata
	.align	2
.LC48:
	.word	Graphics_Buffer
	.align	2
.LC49:
	.word	Graphics_ActiveScreen
.text
	.align	2
	.globl	Graphics_DrawHorizontal
	.type	 Graphics_DrawHorizontal,function
	.thumb_func
Graphics_DrawHorizontal:
	push	{r4, r7, lr}
	add	sp, sp, #-32
	mov	r7, sp
	add	r4, r0, #0
	add	r0, r2, #0
	str	r3, [r7, #8]
	add	r2, r7, #0
	add	r3, r4, #0
	strh	r3, [r2]
	add	r2, r7, #2
	strh	r1, [r2]
	add	r1, r7, #4
	strh	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #20
	ldr	r1, [r7, #8]
	ldrb	r2, [r1]
	strb	r2, [r0]
	add	r0, r7, #0
	add	r1, r7, #2
	mov	r2, #0
	ldrsh	r0, [r0, r2]
	mov	r4, #0
	ldrsh	r1, [r1, r4]
	cmp	r0, r1
	ble	.L192	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #12
	add	r1, r7, #0
	ldrh	r2, [r1]
	strh	r2, [r0]
	add	r0, r7, #0
	add	r1, r7, #2
	ldrh	r2, [r1]
	strh	r2, [r0]
	add	r0, r7, #2
	add	r1, r7, #0
	add	r1, r1, #12
	ldrh	r2, [r1]
	strh	r2, [r0]
.L192:
	ldr	r0, .L196
	ldr	r2, .L196+4
	ldrb	r1, [r2]
	add	r3, r1, #0
	lsl	r2, r3, #1
	add	r2, r2, r1
	lsl	r1, r2, #2
	add	r0, r0, r1
	ldr	r1, .L196
	ldr	r3, .L196+4
	ldrb	r2, [r3]
	add	r4, r2, #0
	lsl	r3, r4, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	add	r3, r1, r2
	ldrb	r1, [r3, #5]
	add	r2, r7, #4
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	mul	r1, r1, r3
	add	r2, r7, #0
	mov	r4, #0
	ldrsh	r3, [r2, r4]
	add	r1, r1, r3
	ldr	r0, [r0]
	add	r1, r0, r1
	str	r1, [r7, #16]
	ldr	r0, [r7, #16]
	mov	r1, #1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L193	@cond_branch
	ldr	r0, [r7, #16]
	sub	r1, r0, #1
	str	r1, [r7, #16]
.L193:
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #2
	add	r2, r7, #0
	ldrh	r1, [r1]
	ldrh	r2, [r2]
	sub	r1, r1, r2
	add	r2, r1, #0
	strh	r2, [r0]
	add	r0, r7, #0
	add	r0, r0, #22
	ldrh	r1, [r0]
	mov	r2, #1
	add	r0, r1, #0
	and	r0, r0, r2
	add	r2, r0, #0
	lsl	r1, r2, #16
	lsr	r0, r1, #16
	cmp	r0, #0
	beq	.L194	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #22
	add	r0, r7, #0
	add	r0, r0, #22
	add	r1, r7, #0
	add	r1, r1, #22
	ldrh	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strh	r2, [r0]
.L194:
	add	r0, r7, #0
	add	r0, r0, #22
	ldrh	r1, [r0]
	cmp	r1, #0
	bne	.L195	@cond_branch
	b	.L191
.L197:
	.align	2
.L196:
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.L195:
	add	r0, r7, #0
	add	r0, r0, #24
	add	r1, r7, #0
	add	r1, r1, #20
	ldrb	r3, [r1]
	add	r2, r3, #0
	lsl	r1, r2, #8
	add	r2, r7, #0
	add	r2, r2, #20
	ldrb	r3, [r2]
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #26
	add	r1, r7, #0
	add	r1, r1, #24
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, .L198
	str	r0, [r7, #28]
	ldr	r0, [r7, #28]
	add	r1, r7, #0
	add	r1, r1, #26
	str	r1, [r0]
	ldr	r1, [r7, #28]
	add	r0, r1, #4
	ldr	r1, [r7, #16]
	str	r1, [r0]
	ldr	r1, [r7, #28]
	add	r0, r1, #0
	add	r0, r0, #8
	add	r1, r7, #0
	add	r1, r1, #22
	ldrh	r2, [r1]
	lsr	r1, r2, #1
	add	r3, r1, #0
	lsl	r2, r3, #16
	lsr	r1, r2, #16
	mov	r2, #129
	lsl	r2, r2, #24
	orr	r1, r1, r2
	str	r1, [r0]
.L191:
	add	sp, sp, #32
	pop	{r4, r7, pc}
.L199:
	.align	2
.L198:
	.word	67109076
.Lfe17:
	.size	 Graphics_DrawHorizontal,.Lfe17-Graphics_DrawHorizontal
	.align	2
	.globl	Graphics_ClipPolys
	.type	 Graphics_ClipPolys,function
	.thumb_func
Graphics_ClipPolys:
	push	{r7, lr}
	mov	r7, sp
.L200:
	pop	{r7, pc}
.Lfe18:
	.size	 Graphics_ClipPolys,.Lfe18-Graphics_ClipPolys
	.section .rodata
	.align	2
.LC50:
	.word	Graphics_Buffer
	.align	2
.LC51:
	.word	Graphics_ActiveScreen
.text
	.align	2
	.globl	Graphics_ClearScreen
	.type	 Graphics_ClearScreen,function
	.thumb_func
Graphics_ClearScreen:
	push	{r4, r7, lr}
	add	sp, sp, #-12
	mov	r7, sp
	str	r0, [r7]
	add	r0, r7, #4
	add	r1, r7, #0
	ldrb	r3, [r1]
	add	r2, r3, #0
	lsl	r1, r2, #8
	add	r2, r7, #0
	ldrb	r3, [r2]
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strh	r1, [r0]
	ldr	r0, .L202
	str	r0, [r7, #8]
	ldr	r0, [r7, #8]
	add	r1, r7, #4
	str	r1, [r0]
	ldr	r1, [r7, #8]
	add	r0, r1, #4
	ldr	r1, .L202+4
	ldr	r3, .L202+8
	ldrb	r2, [r3]
	add	r4, r2, #0
	lsl	r3, r4, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	add	r1, r1, r2
	ldr	r2, [r1]
	str	r2, [r0]
	ldr	r1, [r7, #8]
	add	r0, r1, #0
	add	r0, r0, #8
	ldr	r1, .L202+4
	ldr	r3, .L202+8
	ldrb	r2, [r3]
	add	r4, r2, #0
	lsl	r3, r4, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	add	r1, r1, r2
	ldrh	r2, [r1, #8]
	lsr	r1, r2, #1
	add	r3, r1, #0
	lsl	r2, r3, #16
	lsr	r1, r2, #16
	mov	r2, #129
	lsl	r2, r2, #24
	orr	r1, r1, r2
	str	r1, [r0]
.L201:
	add	sp, sp, #12
	pop	{r4, r7, pc}
.L203:
	.align	2
.L202:
	.word	67109076
	.word	Graphics_Buffer
	.word	Graphics_ActiveScreen
.Lfe19:
	.size	 Graphics_ClearScreen,.Lfe19-Graphics_ClearScreen
	.align	2
	.globl	Graphics_GetIndexFromPalette
	.type	 Graphics_GetIndexFromPalette,function
	.thumb_func
Graphics_GetIndexFromPalette:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-12
	mov	r7, sp
	add	r3, r0, #0
	add	r0, r2, #0
	add	r2, r7, #0
	strb	r3, [r2]
	add	r2, r7, #1
	strb	r1, [r2]
	add	r1, r7, #2
	strb	r0, [r1]
	add	r0, r7, #4
	mov	r1, #0
	strb	r1, [r0]
	add	r1, r7, #5
	add	r2, r7, #6
	add	r3, r7, #7
	mov	r0, #1
	bl	Graphics_GetPaletteColour
	add	r0, r7, #5
	add	r2, r7, #5
	ldrb	r1, [r2]
	add	r2, r7, #0
	ldrb	r3, [r2]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L205	@cond_branch
	add	r1, r7, #5
	add	r2, r7, #0
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	sub	r3, r1, r2
	add	r1, r3, #0
	b	.L206
.L205:
	add	r2, r7, #5
	ldrb	r3, [r2]
	neg	r2, r3
	add	r3, r7, #0
	ldrb	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L206:
	strb	r1, [r0]
	add	r0, r7, #6
	add	r2, r7, #6
	ldrb	r1, [r2]
	add	r2, r7, #1
	ldrb	r3, [r2]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L207	@cond_branch
	add	r1, r7, #6
	add	r2, r7, #1
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	sub	r3, r1, r2
	add	r1, r3, #0
	b	.L208
.L207:
	add	r2, r7, #6
	ldrb	r3, [r2]
	neg	r2, r3
	add	r3, r7, #1
	ldrb	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L208:
	strb	r1, [r0]
	add	r0, r7, #7
	add	r2, r7, #7
	ldrb	r1, [r2]
	add	r2, r7, #2
	ldrb	r3, [r2]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L209	@cond_branch
	add	r1, r7, #7
	add	r2, r7, #2
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	sub	r3, r1, r2
	add	r1, r3, #0
	b	.L210
.L209:
	add	r2, r7, #7
	ldrb	r3, [r2]
	neg	r2, r3
	add	r3, r7, #2
	ldrb	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L210:
	strb	r1, [r0]
	add	r0, r7, #3
	mov	r1, #1
	strb	r1, [r0]
.L211:
	b	.L214
	b	.L212
.L214:
	add	r1, r7, #3
	ldrb	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #8
	add	r2, r7, #0
	add	r2, r2, #9
	add	r3, r7, #0
	add	r3, r3, #10
	bl	Graphics_GetPaletteColour
	add	r0, r7, #5
	ldrb	r4, [r0]
	add	r1, r7, #0
	add	r1, r1, #8
	ldrb	r0, [r1]
	add	r1, r7, #0
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, #0
	blt	.L216	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #8
	ldrb	r0, [r1]
	add	r1, r7, #0
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, r4
	ble	.L217	@cond_branch
	b	.L213
.L216:
	add	r0, r7, #0
	add	r0, r0, #8
	ldrb	r1, [r0]
	neg	r0, r1
	add	r1, r7, #0
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, r4
	ble	.L217	@cond_branch
	b	.L213
.L217:
	add	r0, r7, #6
	ldrb	r5, [r0]
	add	r1, r7, #0
	add	r1, r1, #9
	ldrb	r0, [r1]
	add	r1, r7, #1
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, #0
	blt	.L218	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #9
	ldrb	r0, [r1]
	add	r1, r7, #1
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, r5
	ble	.L219	@cond_branch
	b	.L213
.L218:
	add	r0, r7, #0
	add	r0, r0, #9
	ldrb	r1, [r0]
	neg	r0, r1
	add	r1, r7, #1
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, r5
	ble	.L219	@cond_branch
	b	.L213
.L219:
	add	r0, r7, #7
	ldrb	r6, [r0]
	add	r1, r7, #0
	add	r1, r1, #10
	ldrb	r0, [r1]
	add	r1, r7, #2
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, #0
	blt	.L220	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #10
	ldrb	r0, [r1]
	add	r1, r7, #2
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, r6
	ble	.L221	@cond_branch
	b	.L213
.L220:
	add	r0, r7, #0
	add	r0, r0, #10
	ldrb	r1, [r0]
	neg	r0, r1
	add	r1, r7, #2
	ldrb	r2, [r1]
	sub	r0, r0, r2
	cmp	r0, r6
	ble	.L221	@cond_branch
	b	.L213
.L221:
	add	r0, r7, #4
	add	r1, r7, #3
	ldrb	r2, [r1]
	strb	r2, [r0]
	add	r0, r7, #5
	add	r2, r7, #0
	add	r2, r2, #8
	ldrb	r1, [r2]
	add	r2, r7, #0
	ldrb	r3, [r2]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L222	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #8
	add	r2, r7, #0
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	sub	r3, r1, r2
	add	r1, r3, #0
	b	.L223
.L222:
	add	r2, r7, #0
	add	r2, r2, #8
	ldrb	r3, [r2]
	neg	r2, r3
	add	r3, r7, #0
	ldrb	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L223:
	strb	r1, [r0]
	add	r0, r7, #6
	add	r2, r7, #0
	add	r2, r2, #9
	ldrb	r1, [r2]
	add	r2, r7, #1
	ldrb	r3, [r2]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L224	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #9
	add	r2, r7, #1
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	sub	r3, r1, r2
	add	r1, r3, #0
	b	.L225
.L224:
	add	r2, r7, #0
	add	r2, r2, #9
	ldrb	r3, [r2]
	neg	r2, r3
	add	r3, r7, #1
	ldrb	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L225:
	strb	r1, [r0]
	add	r0, r7, #7
	add	r2, r7, #0
	add	r2, r2, #10
	ldrb	r1, [r2]
	add	r2, r7, #2
	ldrb	r3, [r2]
	sub	r1, r1, r3
	cmp	r1, #0
	blt	.L226	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #10
	add	r2, r7, #2
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	sub	r3, r1, r2
	add	r1, r3, #0
	b	.L227
.L226:
	add	r2, r7, #0
	add	r2, r2, #10
	ldrb	r3, [r2]
	neg	r2, r3
	add	r3, r7, #2
	ldrb	r3, [r3]
	sub	r2, r2, r3
	add	r1, r2, #0
.L227:
	strb	r1, [r0]
	mov	r0, #0
	add	r1, r7, #5
	add	r2, r7, #6
	ldrb	r1, [r1]
	ldrb	r2, [r2]
	cmp	r1, r2
	bne	.L229	@cond_branch
	mov	r0, #1
.L229:
	add	r1, r7, #7
	ldrb	r2, [r1]
	cmp	r0, r2
	beq	.L213	@cond_branch
	add	r0, r7, #4
	ldrb	r1, [r0]
	add	r0, r1, #0
	b	.L204
.L228:
.L215:
.L213:
	add	r1, r7, #3
	add	r0, r7, #3
	add	r1, r7, #3
	ldrb	r2, [r1]
	add	r1, r2, #1
	add	r2, r1, #0
	strb	r2, [r0]
	b	.L211
.L212:
	add	r0, r7, #4
	ldrb	r1, [r0]
	add	r0, r1, #0
	b	.L204
.L204:
	add	sp, sp, #12
	pop	{r4, r5, r6, r7, pc}
.Lfe20:
	.size	 Graphics_GetIndexFromPalette,.Lfe20-Graphics_GetIndexFromPalette
	.align	2
	.globl	Graphics_SetPaletteColour
	.type	 Graphics_SetPaletteColour,function
	.thumb_func
Graphics_SetPaletteColour:
	push	{r4, r5, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	add	r5, r0, #0
	add	r4, r1, #0
	add	r1, r2, #0
	add	r0, r3, #0
	add	r2, r7, #0
	add	r3, r5, #0
	strb	r3, [r2]
	add	r2, r7, #1
	add	r3, r4, #0
	strb	r3, [r2]
	add	r2, r7, #2
	strb	r1, [r2]
	add	r1, r7, #3
	strb	r0, [r1]
	add	r0, r7, #0
	ldrb	r1, [r0]
	add	r0, r1, #0
	lsl	r1, r0, #1
	mov	r2, #160
	lsl	r2, r2, #19
	add	r0, r1, r2
	add	r1, r7, #3
	ldrb	r2, [r1]
	lsr	r1, r2, #3
	add	r3, r1, #0
	lsl	r2, r3, #24
	lsr	r1, r2, #24
	add	r2, r1, #0
	lsl	r1, r2, #10
	add	r2, r7, #2
	ldrb	r3, [r2]
	lsr	r2, r3, #3
	add	r3, r2, #0
	lsl	r2, r3, #24
	lsr	r3, r2, #24
	add	r2, r3, #0
	lsl	r3, r2, #5
	add	r2, r3, #0
	orr	r1, r1, r2
	add	r2, r7, #1
	ldrb	r3, [r2]
	lsr	r2, r3, #3
	add	r3, r2, #0
	lsl	r2, r3, #24
	lsr	r3, r2, #24
	add	r2, r3, #0
	orr	r2, r2, r1
	add	r1, r2, #0
	strh	r1, [r0]
.L230:
	add	sp, sp, #4
	pop	{r4, r5, r7, pc}
.Lfe21:
	.size	 Graphics_SetPaletteColour,.Lfe21-Graphics_SetPaletteColour
	.align	2
	.globl	Graphics_GetPaletteColour
	.type	 Graphics_GetPaletteColour,function
	.thumb_func
Graphics_GetPaletteColour:
	push	{r7, lr}
	add	sp, sp, #-20
	mov	r7, sp
	str	r1, [r7, #4]
	str	r2, [r7, #8]
	str	r3, [r7, #12]
	add	r1, r7, #0
	strb	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #16
	add	r1, r7, #0
	ldrb	r2, [r1]
	add	r1, r2, #0
	lsl	r2, r1, #1
	mov	r3, #160
	lsl	r3, r3, #19
	add	r1, r2, r3
	ldrh	r2, [r1]
	strh	r2, [r0]
	ldr	r0, [r7, #4]
	add	r1, r7, #0
	add	r1, r1, #16
	ldrh	r2, [r1]
	add	r1, r2, #0
	mov	r2, #31
	and	r1, r1, r2
	add	r2, r1, #0
	lsl	r1, r2, #3
	add	r2, r1, #0
	strb	r2, [r0]
	ldr	r0, [r7, #8]
	add	r1, r7, #0
	add	r1, r1, #16
	ldrh	r2, [r1]
	mov	r3, #248
	lsl	r3, r3, #2
	add	r1, r2, #0
	and	r1, r1, r3
	add	r3, r1, #0
	lsl	r2, r3, #16
	lsr	r1, r2, #16
	lsr	r2, r1, #5
	add	r1, r2, #0
	lsl	r2, r1, #3
	add	r1, r2, #0
	strb	r1, [r0]
	ldr	r0, [r7, #12]
	add	r1, r7, #0
	add	r1, r1, #16
	ldrh	r2, [r1]
	mov	r3, #248
	lsl	r3, r3, #7
	add	r1, r2, #0
	and	r1, r1, r3
	add	r3, r1, #0
	lsl	r2, r3, #16
	lsr	r1, r2, #16
	lsr	r2, r1, #10
	add	r1, r2, #0
	lsl	r2, r1, #3
	add	r1, r2, #0
	strb	r1, [r0]
.L231:
	add	sp, sp, #20
	pop	{r7, pc}
.Lfe22:
	.size	 Graphics_GetPaletteColour,.Lfe22-Graphics_GetPaletteColour
	.comm	Graphics_DisplayMode, 4	@ 1
	.comm	Graphics_ActiveScreen, 4	@ 1
	.comm	Graphics_Buffer, 48	@ 48
	.comm	Graphics_TriPointArray, 6000	@ 6000
	.comm	Graphics_TriColourArray, 2000	@ 2000
	.comm	Graphics_TriCount, 4	@ 1
	.comm	Graphics_DrawTriBuffer, 8192	@ 8192
	.comm	Graphics_DrawTriCode, 4	@ 4
	.comm	Debug_Buffer, 256	@ 256
